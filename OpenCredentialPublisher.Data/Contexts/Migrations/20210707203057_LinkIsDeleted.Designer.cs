// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenCredentialPublisher.Data.Contexts;

namespace OpenCredentialPublisher.Data.Contexts.Migrations
{
    [DbContext(typeof(WalletDbContext))]
    [Migration("20210707203057_LinkIsDeleted")]
    partial class LinkIsDeleted
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.AchievementClr", b =>
                {
                    b.Property<int>("AchievementClrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AchievementKey")
                        .HasColumnType("int");

                    b.Property<int>("ClrKey")
                        .HasColumnType("int");

                    b.HasKey("AchievementClrId");

                    b.HasIndex("AchievementKey");

                    b.HasIndex("ClrKey");

                    b.ToTable("AchievementClr");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.AchievementDType", b =>
                {
                    b.Property<int>("AchievementKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AchievementType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alignments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Associations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClrDTypeClrKey")
                        .HasColumnType("int");

                    b.Property<float?>("CreditsAvailable")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endorsements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldOfStudy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HumanCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifiers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignedEndorsements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AchievementKey");

                    b.HasIndex("ClrDTypeClrKey");

                    b.ToTable("AchievementDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.AddressDType", b =>
                {
                    b.Property<int>("AddressKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLocality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressRegion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EndorsementProfileKey")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostOfficeBoxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfileKey")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressKey");

                    b.HasIndex("EndorsementProfileKey")
                        .IsUnique()
                        .HasFilter("[EndorsementProfileKey] IS NOT NULL");

                    b.HasIndex("ProfileKey")
                        .IsUnique()
                        .HasFilter("[ProfileKey] IS NOT NULL");

                    b.ToTable("AddressDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.AlignmentDType", b =>
                {
                    b.Property<int>("AlignmentKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AchievementKey")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationalFramework")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResultDescriptionKey")
                        .HasColumnType("int");

                    b.Property<int?>("ResultKey")
                        .HasColumnType("int");

                    b.Property<int?>("RubricCriterionLevelKey")
                        .HasColumnType("int");

                    b.Property<string>("TargetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlignmentKey");

                    b.HasIndex("AchievementKey");

                    b.HasIndex("ResultDescriptionKey");

                    b.HasIndex("ResultKey");

                    b.HasIndex("RubricCriterionLevelKey");

                    b.ToTable("AlignmentDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.ArtifactDType", b =>
                {
                    b.Property<int>("ArtifactKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EvidenceKey")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArtifactKey");

                    b.HasIndex("EvidenceKey");

                    b.ToTable("ArtifactDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.AssertionClr", b =>
                {
                    b.Property<int>("AssertionClrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssertionKey")
                        .HasColumnType("int");

                    b.Property<int>("ClrKey")
                        .HasColumnType("int");

                    b.HasKey("AssertionClrId");

                    b.HasIndex("AssertionKey");

                    b.HasIndex("ClrKey");

                    b.ToTable("AssertionClr");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.AssertionDType", b =>
                {
                    b.Property<int>("AssertionKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AchievementKey")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActivityEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActivityStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClrDTypeClrKey")
                        .HasColumnType("int");

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("CreditsEarned")
                        .HasColumnType("real");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IssuedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Narrative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecipientIdentityKey")
                        .HasColumnType("int");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Revoked")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignedEndorsements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceProfileKey")
                        .HasColumnType("int");

                    b.Property<string>("Term")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssertionKey");

                    b.HasIndex("AchievementKey");

                    b.HasIndex("ClrDTypeClrKey");

                    b.HasIndex("RecipientIdentityKey");

                    b.HasIndex("SourceProfileKey");

                    b.ToTable("AssertionDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.AssociationDType", b =>
                {
                    b.Property<int>("AssociationKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AchievementKey")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssociationType")
                        .HasColumnType("int");

                    b.Property<string>("TargetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssociationKey");

                    b.HasIndex("AchievementKey");

                    b.ToTable("AssociationDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.ClrDType", b =>
                {
                    b.Property<int>("ClrKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssuedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LearnerProfileKey")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Partial")
                        .HasColumnType("bit");

                    b.Property<int?>("PublisherProfileKey")
                        .HasColumnType("int");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Revoked")
                        .HasColumnType("bit");

                    b.Property<string>("SignedAssertions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignedEndorsements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClrKey");

                    b.HasIndex("LearnerProfileKey");

                    b.HasIndex("PublisherProfileKey");

                    b.ToTable("ClrDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.CriteriaDType", b =>
                {
                    b.Property<int>("CriteriaKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AchievementKey")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Narrative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CriteriaKey");

                    b.HasIndex("AchievementKey")
                        .IsUnique()
                        .HasFilter("[AchievementKey] IS NOT NULL");

                    b.ToTable("CriteriaDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.CryptographicKeyDType", b =>
                {
                    b.Property<int>("CryptographicKeyKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicKeyPem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CryptographicKeyKey");

                    b.ToTable("CryptographicKeyDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.EndorsementClaimDType", b =>
                {
                    b.Property<int>("EndorsementClaimKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndorsementComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndorsementKey")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EndorsementClaimKey");

                    b.HasIndex("EndorsementKey")
                        .IsUnique();

                    b.ToTable("EndorsementClaimDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.EndorsementDType", b =>
                {
                    b.Property<int>("EndorsementKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AchievementKey")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssertionKey")
                        .HasColumnType("int");

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssuedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IssuerEndorsementProfileKey")
                        .HasColumnType("int");

                    b.Property<int?>("ProfileKey")
                        .HasColumnType("int");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Revoked")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EndorsementKey");

                    b.HasIndex("AchievementKey");

                    b.HasIndex("AssertionKey");

                    b.HasIndex("IssuerEndorsementProfileKey");

                    b.HasIndex("ProfileKey");

                    b.ToTable("EndorsementDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.EndorsementProfileDType", b =>
                {
                    b.Property<int>("EndorsementProfileKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifiers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Official")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfileKey")
                        .HasColumnType("int");

                    b.Property<int?>("PublicKeyCryptographicKeyKey")
                        .HasColumnType("int");

                    b.Property<string>("RevocationList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourcedId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VerificationKey")
                        .HasColumnType("int");

                    b.HasKey("EndorsementProfileKey");

                    b.HasIndex("ProfileKey")
                        .IsUnique()
                        .HasFilter("[ProfileKey] IS NOT NULL");

                    b.HasIndex("PublicKeyCryptographicKeyKey");

                    b.HasIndex("VerificationKey");

                    b.ToTable("EndorsementProfileDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.EvidenceDType", b =>
                {
                    b.Property<int>("EvidenceKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssertionKey")
                        .HasColumnType("int");

                    b.Property<string>("Audience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Narrative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EvidenceKey");

                    b.HasIndex("AssertionKey");

                    b.ToTable("EvidenceDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.IdentityDType", b =>
                {
                    b.Property<int>("IdentityKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Hashed")
                        .HasColumnType("bit");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdentityKey");

                    b.ToTable("IdentityDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.ProfileDType", b =>
                {
                    b.Property<int>("ProfileKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifiers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Official")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentOrgProfileKey")
                        .HasColumnType("int");

                    b.Property<int?>("PublicKeyCryptographicKeyKey")
                        .HasColumnType("int");

                    b.Property<string>("RevocationList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignedEndorsements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourcedId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfileKey");

                    b.HasIndex("ParentOrgProfileKey");

                    b.HasIndex("PublicKeyCryptographicKeyKey");

                    b.ToTable("ProfileDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.ResultDType", b =>
                {
                    b.Property<int>("ResultKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AchievedLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssertionKey")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResultKey");

                    b.HasIndex("AssertionKey");

                    b.ToTable("ResultDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.ResultDescriptionDType", b =>
                {
                    b.Property<int>("ResultDescriptionKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AchievementKey")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AllowedValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueMax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueMin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResultDescriptionKey");

                    b.HasIndex("AchievementKey");

                    b.ToTable("ResultDescriptionDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.RubricCriterionLevelDType", b =>
                {
                    b.Property<int>("RubricCriterionLevelKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Points")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResultDescriptionKey")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RubricCriterionLevelKey");

                    b.HasIndex("ResultDescriptionKey");

                    b.ToTable("RubricCriterionLevelDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.SystemIdentifierDType", b =>
                {
                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SystemIdentifierDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.VerificationDType", b =>
                {
                    b.Property<int>("VerificationKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AllowedOrigins")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssertionKey")
                        .HasColumnType("int");

                    b.Property<int?>("ClrKey")
                        .HasColumnType("int");

                    b.Property<string>("Creator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EndorsementKey")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfileKey")
                        .HasColumnType("int");

                    b.Property<string>("StartsWith")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("VerificationProperty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VerificationKey");

                    b.HasIndex("AssertionKey")
                        .IsUnique()
                        .HasFilter("[AssertionKey] IS NOT NULL");

                    b.HasIndex("ClrKey")
                        .IsUnique()
                        .HasFilter("[ClrKey] IS NOT NULL");

                    b.HasIndex("EndorsementKey")
                        .IsUnique()
                        .HasFilter("[EndorsementKey] IS NOT NULL");

                    b.HasIndex("ProfileKey")
                        .IsUnique()
                        .HasFilter("[ProfileKey] IS NOT NULL");

                    b.ToTable("VerificationDType");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.AgentContextModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AgentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContextJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DomainDid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndpointUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssuerDid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IssuerRegistered")
                        .HasColumnType("bit");

                    b.Property<string>("IssuerVerKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Network")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProvisioningTokenId")
                        .HasColumnType("int");

                    b.Property<string>("SdkVerKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SdkVerKeyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThreadId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerityAgentVerKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerityPublicDid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerityPublicVerKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerityUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WalletKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WalletPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgentContexts");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.AuthorizationModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorizationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeVerifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Endpoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scopes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceForeignKey")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceForeignKey");

                    b.HasIndex("UserId");

                    b.ToTable("Authorizations");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.Badgr.BadgrAssertionModel", b =>
                {
                    b.Property<int>("BadgrAssertionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acceptance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BadgeClassJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BadgeClassOpenBadgeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BadgeJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Badgeclass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BadgrBackpackId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("IssueStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IssuedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issuer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssuerJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssuerOpenBadgeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Narrative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenBadgeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<int?>("RecipientIdentityKey")
                        .HasColumnType("int");

                    b.Property<string>("RecipientJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Revoked")
                        .HasColumnType("bit");

                    b.Property<string>("SignedAssertion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BadgrAssertionId");

                    b.HasIndex("BadgrBackpackId");

                    b.HasIndex("RecipientIdentityKey");

                    b.ToTable("BadgrAssertions");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.Badgr.BadgrBackpackModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssertionsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Json")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentCredentialPackageId")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Revoked")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ParentCredentialPackageId")
                        .IsUnique();

                    b.ToTable("BadgrBackpacks");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.CertificateModel", b =>
                {
                    b.Property<string>("Host")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IssuedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssuedToName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Host");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ClrAssertion", b =>
                {
                    b.Property<int>("ClrAssertionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Achievement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ActivityEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActivityStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdditionalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssertionClrs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssertionKey")
                        .HasColumnType("int");

                    b.Property<int>("ClrForeignKey")
                        .HasColumnType("int");

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("CreditsEarned")
                        .HasColumnType("real");

                    b.Property<string>("Endorsements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Evidence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IssuedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Narrative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Results")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Revoked")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignedAssertion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignedEndorsements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Term")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Verification")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClrAssertionId");

                    b.HasIndex("ClrForeignKey");

                    b.ToTable("ClrAssertions");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ClrModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssertionsCount")
                        .HasColumnType("int");

                    b.Property<string>("AuthorizationForeignKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CredentialPackageId")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Json")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LearnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentClrSetId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentCredentialPackageId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentVerifiableCredentialId")
                        .HasColumnType("int");

                    b.Property<string>("PublisherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SignedClr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationForeignKey");

                    b.HasIndex("CredentialPackageId");

                    b.HasIndex("ParentClrSetId");

                    b.HasIndex("ParentCredentialPackageId")
                        .IsUnique()
                        .HasFilter("[ParentCredentialPackageId] IS NOT NULL");

                    b.HasIndex("ParentVerifiableCredentialId");

                    b.ToTable("Clrs");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ClrSetModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClrsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Json")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentCredentialPackageId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentVerifiableCredentialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCredentialPackageId")
                        .IsUnique()
                        .HasFilter("[ParentCredentialPackageId] IS NOT NULL");

                    b.HasIndex("ParentVerifiableCredentialId");

                    b.ToTable("ClrSets");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ConnectionRequestModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("AgentContextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConnectionRequestStep")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ThreadId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("WalletRelationshipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentContextId");

                    b.HasIndex("ThreadId")
                        .IsUnique()
                        .HasFilter("[ThreadId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletRelationshipId");

                    b.ToTable("ConnectionRequests");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ConnectionRequestStep", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConnectionRequestSteps");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Initiated"
                        },
                        new
                        {
                            Id = 1,
                            Name = "PendingAgent"
                        },
                        new
                        {
                            Id = 2,
                            Name = "StartingInvitation"
                        },
                        new
                        {
                            Id = 3,
                            Name = "RequestingInvitation"
                        },
                        new
                        {
                            Id = 4,
                            Name = "InvitationGenerated"
                        },
                        new
                        {
                            Id = 5,
                            Name = "InvitationAccepted"
                        },
                        new
                        {
                            Id = 6,
                            Name = "InvitationCompleted"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Error"
                        });
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.CredentialDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AgentContextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CredentialDefinitionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CredentialSchemaId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThreadId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgentContextId");

                    b.HasIndex("CredentialSchemaId");

                    b.ToTable("CredentialDefinitions");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.CredentialPackageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorizationForeignKey")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Revoked")
                        .HasColumnType("bit");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationForeignKey");

                    b.HasIndex("UserId");

                    b.ToTable("CredentialPackages");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.CredentialRequestModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("AgentContextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CredentialDefinitionId")
                        .HasColumnType("int");

                    b.Property<int>("CredentialPackageId")
                        .HasColumnType("int");

                    b.Property<int>("CredentialRequestStep")
                        .HasColumnType("int");

                    b.Property<int?>("CredentialSchemaId")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ThreadId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WalletRelationshipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentContextId");

                    b.HasIndex("CredentialDefinitionId");

                    b.HasIndex("CredentialPackageId");

                    b.HasIndex("CredentialSchemaId");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletRelationshipId");

                    b.ToTable("CredentialRequests");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.CredentialRequestStep", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CredentialRequestSteps");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Initiated"
                        },
                        new
                        {
                            Id = 1,
                            Name = "PendingAgent"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PendingSchema"
                        },
                        new
                        {
                            Id = 3,
                            Name = "PendingCredentialDefinition"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ReadyToSend"
                        },
                        new
                        {
                            Id = 5,
                            Name = "SendingOffer"
                        },
                        new
                        {
                            Id = 6,
                            Name = "OfferSent"
                        },
                        new
                        {
                            Id = 7,
                            Name = "OfferAccepted"
                        },
                        new
                        {
                            Id = 8,
                            Name = "CheckingRevocationStatus"
                        },
                        new
                        {
                            Id = 9,
                            Name = "CredentialIsRevoked"
                        },
                        new
                        {
                            Id = 10,
                            Name = "CredentialIsStillValid"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Error"
                        },
                        new
                        {
                            Id = 14,
                            Name = "ErrorWritingSchema"
                        },
                        new
                        {
                            Id = 15,
                            Name = "ErrorWritingCredentialDefinition"
                        });
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.CredentialSchema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchemaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("ThreadId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CredentialSchema");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.DiscoveryDocumentModel", b =>
                {
                    b.Property<int>("DiscoveryDocumentKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiBase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorizationUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Key")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivacyPolicyUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScopesOffered")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceForeignKey")
                        .HasColumnType("int");

                    b.Property<string>("TermsOfServiceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenRevocationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiscoveryDocumentKey");

                    b.HasIndex("SourceForeignKey")
                        .IsUnique();

                    b.ToTable("DiscoveryDocumentModel");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.HttpClientLog", b =>
                {
                    b.Property<int>("HttpClientLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Machine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestContentBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestHeaders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestRouteData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestRouteTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequestTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseContentBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseHeaders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResponseTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HttpClientLogId");

                    b.ToTable("HttpClientLogs");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.IdentityCertificateModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DnsName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ValidUntil")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("IdentityCertificates");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.LinkModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ClrForeignKey")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CredentialRequestId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresAccessKey")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClrForeignKey");

                    b.HasIndex("CredentialRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.MessageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Recipient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SendAttempts")
                        .HasColumnType("int");

                    b.Property<int?>("ShareId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShareId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ProvisioningTokenModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AgentContextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nonce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SponseeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SponsorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SponsorVerKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timestamp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgentContextId")
                        .IsUnique();

                    b.ToTable("ProvisioningToken");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.RecipientModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Recipients");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.RevocationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevocationListId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevokedId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("UserId");

                    b.ToTable("Revocations");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ShareModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LinkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RecipientId")
                        .HasColumnType("int");

                    b.Property<int>("ShareTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UseCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ShareTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShareTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Email"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pdf"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Wallet"
                        });
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.SourceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.StatusModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Accepted"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Used"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Expired"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Created"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Deleted"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Visible"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hidden"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Submitted"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Sent"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Error"
                        },
                        new
                        {
                            Id = 14,
                            Name = "WaitingForScoreReport"
                        },
                        new
                        {
                            Id = 15,
                            Name = "ReadyForVerification"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Verified"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Unused"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Success"
                        });
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.VerifiableCredentialModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CredentialsCount")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issuer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Json")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentCredentialPackageId")
                        .HasColumnType("int");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Revoked")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ParentCredentialPackageId")
                        .IsUnique();

                    b.ToTable("VerifiableCredentials");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.WalletRelationshipModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AgentContextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InviteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RelationshipDid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipVerKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WalletName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgentContextId");

                    b.HasIndex("UserId");

                    b.ToTable("WalletRelationships");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.AchievementClr", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.AchievementDType", "Achievement")
                        .WithMany("AchievementClrs")
                        .HasForeignKey("AchievementKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.ClrDType", "Clr")
                        .WithMany("AchievementClrs")
                        .HasForeignKey("ClrKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Clr");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.AchievementDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.ClrDType", null)
                        .WithMany("Achievements")
                        .HasForeignKey("ClrDTypeClrKey");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.AddressDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.EndorsementProfileDType", "EndorsementProfile")
                        .WithOne("Address")
                        .HasForeignKey("OpenCredentialPublisher.ClrLibrary.Models.AddressDType", "EndorsementProfileKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.ProfileDType", "Profile")
                        .WithOne("Address")
                        .HasForeignKey("OpenCredentialPublisher.ClrLibrary.Models.AddressDType", "ProfileKey");

                    b.Navigation("EndorsementProfile");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.AlignmentDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.AchievementDType", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.ResultDescriptionDType", "ResultDescription")
                        .WithMany("Alignments")
                        .HasForeignKey("ResultDescriptionKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.ResultDType", "Result")
                        .WithMany("Alignments")
                        .HasForeignKey("ResultKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.RubricCriterionLevelDType", "RubricCriterionLevel")
                        .WithMany("Alignments")
                        .HasForeignKey("RubricCriterionLevelKey");

                    b.Navigation("Achievement");

                    b.Navigation("Result");

                    b.Navigation("ResultDescription");

                    b.Navigation("RubricCriterionLevel");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.ArtifactDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.EvidenceDType", "Evidence")
                        .WithMany("Artifacts")
                        .HasForeignKey("EvidenceKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evidence");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.AssertionClr", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.AssertionDType", "Assertion")
                        .WithMany("AssertionClrs")
                        .HasForeignKey("AssertionKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.ClrDType", "Clr")
                        .WithMany("AssertionClrs")
                        .HasForeignKey("ClrKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assertion");

                    b.Navigation("Clr");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.AssertionDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.AchievementDType", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.ClrDType", null)
                        .WithMany("Assertions")
                        .HasForeignKey("ClrDTypeClrKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.IdentityDType", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientIdentityKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.ProfileDType", "Source")
                        .WithMany()
                        .HasForeignKey("SourceProfileKey");

                    b.Navigation("Achievement");

                    b.Navigation("Recipient");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.AssociationDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.AchievementDType", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementKey");

                    b.Navigation("Achievement");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.ClrDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.ProfileDType", "Learner")
                        .WithMany()
                        .HasForeignKey("LearnerProfileKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.ProfileDType", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherProfileKey");

                    b.Navigation("Learner");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.CriteriaDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.AchievementDType", "Achievement")
                        .WithOne()
                        .HasForeignKey("OpenCredentialPublisher.ClrLibrary.Models.CriteriaDType", "AchievementKey");

                    b.Navigation("Achievement");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.EndorsementClaimDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.EndorsementDType", "Endorsement")
                        .WithOne("Claim")
                        .HasForeignKey("OpenCredentialPublisher.ClrLibrary.Models.EndorsementClaimDType", "EndorsementKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endorsement");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.EndorsementDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.AchievementDType", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.AssertionDType", "Assertion")
                        .WithMany("Endorsements")
                        .HasForeignKey("AssertionKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.EndorsementProfileDType", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerEndorsementProfileKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.ProfileDType", "Profile")
                        .WithMany("Endorsements")
                        .HasForeignKey("ProfileKey");

                    b.Navigation("Achievement");

                    b.Navigation("Assertion");

                    b.Navigation("Issuer");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.EndorsementProfileDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.ProfileDType", "Profile")
                        .WithOne("EndorsementProfile")
                        .HasForeignKey("OpenCredentialPublisher.ClrLibrary.Models.EndorsementProfileDType", "ProfileKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.CryptographicKeyDType", "PublicKey")
                        .WithMany()
                        .HasForeignKey("PublicKeyCryptographicKeyKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.VerificationDType", "Verification")
                        .WithMany()
                        .HasForeignKey("VerificationKey");

                    b.Navigation("Profile");

                    b.Navigation("PublicKey");

                    b.Navigation("Verification");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.EvidenceDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.AssertionDType", "Assertion")
                        .WithMany("Evidence")
                        .HasForeignKey("AssertionKey");

                    b.Navigation("Assertion");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.ProfileDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.ProfileDType", "ParentOrg")
                        .WithMany()
                        .HasForeignKey("ParentOrgProfileKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.CryptographicKeyDType", "PublicKey")
                        .WithMany()
                        .HasForeignKey("PublicKeyCryptographicKeyKey");

                    b.Navigation("ParentOrg");

                    b.Navigation("PublicKey");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.ResultDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.AssertionDType", "Assertion")
                        .WithMany("Results")
                        .HasForeignKey("AssertionKey");

                    b.Navigation("Assertion");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.ResultDescriptionDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.AchievementDType", "Achievement")
                        .WithMany("ResultDescriptions")
                        .HasForeignKey("AchievementKey");

                    b.Navigation("Achievement");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.RubricCriterionLevelDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.ResultDescriptionDType", "ResultDescription")
                        .WithMany("RubricCriterionLevels")
                        .HasForeignKey("ResultDescriptionKey");

                    b.Navigation("ResultDescription");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.VerificationDType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.AssertionDType", "Assertion")
                        .WithOne("Verification")
                        .HasForeignKey("OpenCredentialPublisher.ClrLibrary.Models.VerificationDType", "AssertionKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.ClrDType", "Clr")
                        .WithOne("Verification")
                        .HasForeignKey("OpenCredentialPublisher.ClrLibrary.Models.VerificationDType", "ClrKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.EndorsementDType", "Endorsement")
                        .WithOne("Verification")
                        .HasForeignKey("OpenCredentialPublisher.ClrLibrary.Models.VerificationDType", "EndorsementKey");

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.ProfileDType", "Profile")
                        .WithOne("Verification")
                        .HasForeignKey("OpenCredentialPublisher.ClrLibrary.Models.VerificationDType", "ProfileKey");

                    b.Navigation("Assertion");

                    b.Navigation("Clr");

                    b.Navigation("Endorsement");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.AuthorizationModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.SourceModel", "Source")
                        .WithMany("Authorizations")
                        .HasForeignKey("SourceForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Source");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.Badgr.BadgrAssertionModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.Badgr.BadgrBackpackModel", "BadgrBackpack")
                        .WithMany("BadgrAssertions")
                        .HasForeignKey("BadgrBackpackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.ClrLibrary.Models.IdentityDType", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientIdentityKey");

                    b.Navigation("BadgrBackpack");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.Badgr.BadgrBackpackModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.CredentialPackageModel", "ParentCredentialPackage")
                        .WithOne("BadgrBackpack")
                        .HasForeignKey("OpenCredentialPublisher.Data.Models.Badgr.BadgrBackpackModel", "ParentCredentialPackageId");

                    b.Navigation("ParentCredentialPackage");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ClrAssertion", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.ClrModel", "AssertionClr")
                        .WithMany("Assertions")
                        .HasForeignKey("ClrForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssertionClr");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ClrModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.AuthorizationModel", "Authorization")
                        .WithMany("Clrs")
                        .HasForeignKey("AuthorizationForeignKey");

                    b.HasOne("OpenCredentialPublisher.Data.Models.CredentialPackageModel", "CredentialPackage")
                        .WithMany("ContainedClrs")
                        .HasForeignKey("CredentialPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.Data.Models.ClrSetModel", "ParentClrSet")
                        .WithMany("Clrs")
                        .HasForeignKey("ParentClrSetId");

                    b.HasOne("OpenCredentialPublisher.Data.Models.CredentialPackageModel", "ParentCredentialPackage")
                        .WithOne("Clr")
                        .HasForeignKey("OpenCredentialPublisher.Data.Models.ClrModel", "ParentCredentialPackageId");

                    b.HasOne("OpenCredentialPublisher.Data.Models.VerifiableCredentialModel", "ParentVerifiableCredential")
                        .WithMany("Clrs")
                        .HasForeignKey("ParentVerifiableCredentialId");

                    b.Navigation("Authorization");

                    b.Navigation("CredentialPackage");

                    b.Navigation("ParentClrSet");

                    b.Navigation("ParentCredentialPackage");

                    b.Navigation("ParentVerifiableCredential");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ClrSetModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.CredentialPackageModel", "ParentCredentialPackage")
                        .WithOne("ClrSet")
                        .HasForeignKey("OpenCredentialPublisher.Data.Models.ClrSetModel", "ParentCredentialPackageId");

                    b.HasOne("OpenCredentialPublisher.Data.Models.VerifiableCredentialModel", "ParentVerifiableCredential")
                        .WithMany("ClrSets")
                        .HasForeignKey("ParentVerifiableCredentialId");

                    b.Navigation("ParentCredentialPackage");

                    b.Navigation("ParentVerifiableCredential");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ConnectionRequestModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.AgentContextModel", "AgentContext")
                        .WithMany()
                        .HasForeignKey("AgentContextId");

                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.Data.Models.WalletRelationshipModel", "WalletRelationship")
                        .WithMany()
                        .HasForeignKey("WalletRelationshipId");

                    b.Navigation("AgentContext");

                    b.Navigation("User");

                    b.Navigation("WalletRelationship");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.CredentialDefinition", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.AgentContextModel", "AgentContext")
                        .WithMany()
                        .HasForeignKey("AgentContextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.Data.Models.CredentialSchema", "CredentialSchema")
                        .WithMany("CredentialDefinitions")
                        .HasForeignKey("CredentialSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgentContext");

                    b.Navigation("CredentialSchema");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.CredentialPackageModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.AuthorizationModel", "Authorization")
                        .WithMany("CredentialPackages")
                        .HasForeignKey("AuthorizationForeignKey")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authorization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.CredentialRequestModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.AgentContextModel", "AgentContext")
                        .WithMany()
                        .HasForeignKey("AgentContextId");

                    b.HasOne("OpenCredentialPublisher.Data.Models.CredentialDefinition", "CredentialDefinition")
                        .WithMany()
                        .HasForeignKey("CredentialDefinitionId");

                    b.HasOne("OpenCredentialPublisher.Data.Models.CredentialPackageModel", "CredentialPackage")
                        .WithMany()
                        .HasForeignKey("CredentialPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.Data.Models.CredentialSchema", "CredentialSchema")
                        .WithMany()
                        .HasForeignKey("CredentialSchemaId");

                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.Data.Models.WalletRelationshipModel", "WalletRelationship")
                        .WithMany("CredentialRequests")
                        .HasForeignKey("WalletRelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgentContext");

                    b.Navigation("CredentialDefinition");

                    b.Navigation("CredentialPackage");

                    b.Navigation("CredentialSchema");

                    b.Navigation("User");

                    b.Navigation("WalletRelationship");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.DiscoveryDocumentModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.SourceModel", "Source")
                        .WithOne("DiscoveryDocument")
                        .HasForeignKey("OpenCredentialPublisher.Data.Models.DiscoveryDocumentModel", "SourceForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.LinkModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.ClrModel", "Clr")
                        .WithMany("Links")
                        .HasForeignKey("ClrForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.Data.Models.CredentialRequestModel", "CredentialRequest")
                        .WithMany()
                        .HasForeignKey("CredentialRequestId");

                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clr");

                    b.Navigation("CredentialRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.MessageModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.ShareModel", "Share")
                        .WithMany("Messages")
                        .HasForeignKey("ShareId");

                    b.Navigation("Share");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ProvisioningTokenModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.AgentContextModel", "AgentContext")
                        .WithOne("ProvisioningToken")
                        .HasForeignKey("OpenCredentialPublisher.Data.Models.ProvisioningTokenModel", "AgentContextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgentContext");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.RecipientModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.RevocationModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.SourceModel", "Source")
                        .WithMany("Revocations")
                        .HasForeignKey("SourceId");

                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ShareModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.LinkModel", "Link")
                        .WithMany("Shares")
                        .HasForeignKey("LinkId");

                    b.HasOne("OpenCredentialPublisher.Data.Models.RecipientModel", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId");

                    b.Navigation("Link");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.VerifiableCredentialModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.CredentialPackageModel", "ParentCredentialPackage")
                        .WithOne("VerifiableCredential")
                        .HasForeignKey("OpenCredentialPublisher.Data.Models.VerifiableCredentialModel", "ParentCredentialPackageId");

                    b.Navigation("ParentCredentialPackage");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.WalletRelationshipModel", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.AgentContextModel", "AgentContext")
                        .WithMany()
                        .HasForeignKey("AgentContextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgentContext");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.AchievementDType", b =>
                {
                    b.Navigation("AchievementClrs");

                    b.Navigation("ResultDescriptions");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.AssertionDType", b =>
                {
                    b.Navigation("AssertionClrs");

                    b.Navigation("Endorsements");

                    b.Navigation("Evidence");

                    b.Navigation("Results");

                    b.Navigation("Verification");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.ClrDType", b =>
                {
                    b.Navigation("AchievementClrs");

                    b.Navigation("Achievements");

                    b.Navigation("AssertionClrs");

                    b.Navigation("Assertions");

                    b.Navigation("Verification");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.EndorsementDType", b =>
                {
                    b.Navigation("Claim")
                        .IsRequired();

                    b.Navigation("Verification")
                        .IsRequired();
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.EndorsementProfileDType", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.EvidenceDType", b =>
                {
                    b.Navigation("Artifacts");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.ProfileDType", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("EndorsementProfile");

                    b.Navigation("Endorsements");

                    b.Navigation("Verification");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.ResultDType", b =>
                {
                    b.Navigation("Alignments");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.ResultDescriptionDType", b =>
                {
                    b.Navigation("Alignments");

                    b.Navigation("RubricCriterionLevels");
                });

            modelBuilder.Entity("OpenCredentialPublisher.ClrLibrary.Models.RubricCriterionLevelDType", b =>
                {
                    b.Navigation("Alignments");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.AgentContextModel", b =>
                {
                    b.Navigation("ProvisioningToken");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.AuthorizationModel", b =>
                {
                    b.Navigation("Clrs");

                    b.Navigation("CredentialPackages");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.Badgr.BadgrBackpackModel", b =>
                {
                    b.Navigation("BadgrAssertions");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ClrModel", b =>
                {
                    b.Navigation("Assertions");

                    b.Navigation("Links");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ClrSetModel", b =>
                {
                    b.Navigation("Clrs");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.CredentialPackageModel", b =>
                {
                    b.Navigation("BadgrBackpack");

                    b.Navigation("Clr");

                    b.Navigation("ClrSet");

                    b.Navigation("ContainedClrs");

                    b.Navigation("VerifiableCredential");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.CredentialSchema", b =>
                {
                    b.Navigation("CredentialDefinitions");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.LinkModel", b =>
                {
                    b.Navigation("Shares");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ShareModel", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.SourceModel", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("DiscoveryDocument");

                    b.Navigation("Revocations");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.VerifiableCredentialModel", b =>
                {
                    b.Navigation("Clrs");

                    b.Navigation("ClrSets");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.WalletRelationshipModel", b =>
                {
                    b.Navigation("CredentialRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
