/*
 * Comprehensive Learner Record Service OpenAPI (YAML) Definition
 *
 * The Comprehensive Learner Record Service enables the exchange of data about users and their achievements between a Comprehensive Learner Record Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace OpenCredentialPublisher.ClrLibrary.Models
{ 
    /// <summary>
    /// A collection of assertions for a single person reported by a single publisher. 
    /// </summary>
    public partial class ClrDType
    { 
        /// <summary>
        /// URL to the JSON-LD context file.
        /// </summary>
        /// <value>URL to the JSON-LD context file.</value>
        [JsonPropertyName("@context"), Newtonsoft.Json.JsonProperty("@context")]
        [Description("URL to the JSON-LD context file.")]
        public string Context { get; set; }
        
        /// <summary>
        /// Unique IRI for the CLR. If the CLR is meant to be verified using Hosted verification, the id must conform to the getClr endpoint format. Model Primitive Datatype = NormalizedString.
        /// </summary>
        /// <value>Unique IRI for the CLR. If the CLR is meant to be verified using Hosted verification, the id must conform to the getClr endpoint format. Model Primitive Datatype = NormalizedString.</value>
        [Required]
        [JsonPropertyName("id"), Newtonsoft.Json.JsonProperty("id")]
        [Description("Unique IRI for the CLR. If the CLR is meant to be verified using Hosted verification, the id must conform to the getClr endpoint format. Model Primitive Datatype = NormalizedString.")]
        public string Id { get; set; }
        
        /// <summary>
        /// The JSON-LD type of this object. Normally 'CLR'. Model Primitive Datatype = NormalizedString.
        /// </summary>
        /// <value>The JSON-LD type of this object. Normally 'CLR'. Model Primitive Datatype = NormalizedString.</value>
        [JsonPropertyName("type"), Newtonsoft.Json.JsonProperty("type")]
        [Description("The JSON-LD type of this object. Normally 'CLR'. Model Primitive Datatype = NormalizedString.")]
        public string Type { get; set; }
        
        /// <summary>
        /// Array of achievements that are related directly or indirectly through associations with the asserted achievements in the CLR. Primarily used to represent hierarchical pathways. Asserted achievements may appear in both this array and in the achievement assertion. If asserted achievements do appear in both places, they MUST match exactly. 
        /// </summary>
        /// <value>Array of achievements that are related directly or indirectly through associations with the asserted achievements in the CLR. Primarily used to represent hierarchical pathways. Asserted achievements may appear in both this array and in the achievement assertion. If asserted achievements do appear in both places, they MUST match exactly. </value>
        [JsonPropertyName("achievements"), Newtonsoft.Json.JsonProperty("achievements")]
        [Description("Array of achievements that are related directly or indirectly through associations with the asserted achievements in the CLR. Primarily used to represent hierarchical pathways. Asserted achievements may appear in both this array and in the achievement assertion. If asserted achievements do appear in both places, they MUST match exactly. ")]
        public virtual List<AchievementDType> Achievements { get; set; }
        
        /// <summary>
        /// The learner's asserted achievements. 
        /// </summary>
        /// <value>The learner's asserted achievements. </value>
        [JsonPropertyName("assertions"), Newtonsoft.Json.JsonProperty("assertions")]
        [Description("The learner's asserted achievements. ")]
        public virtual List<AssertionDType> Assertions { get; set; }
        
        /// <summary>
        /// Timestamp of when the CLR was published. Model Primitive Datatype = DateTime.
        /// </summary>
        /// <value>Timestamp of when the CLR was published. Model Primitive Datatype = DateTime.</value>
        [Required]
        [JsonPropertyName("issuedOn"), Newtonsoft.Json.JsonProperty("issuedOn")]
        [Description("Timestamp of when the CLR was published. Model Primitive Datatype = DateTime.")]
        public DateTime IssuedOn { get; set; }
        
        /// <summary>
        /// Gets or Sets Learner
        /// </summary>
        [Required]
        [JsonPropertyName("learner"), Newtonsoft.Json.JsonProperty("learner")]
        [Description("Learner")]
        public virtual ProfileDType Learner { get; set; }
        
        /// <summary>
        /// Optional name of the CLR. Model Primitive Datatype = String.
        /// </summary>
        /// <value>Optional name of the CLR. Model Primitive Datatype = String.</value>
        [JsonPropertyName("name"), Newtonsoft.Json.JsonProperty("name")]
        [Description("Optional name of the CLR. Model Primitive Datatype = String.")]
        public string Name { get; set; }
        
        /// <summary>
        /// True if CLR does not contain all the assertions known by the publisher for the learner at the time the CLR is issued. Useful if you are sending a small set of achievements in real time when they are achieved. If False or omitted, the CLR SHOULD be interpreted as containing all the assertions for the learner known by the publisher at the time of issue. Model Primitive Datatype = Boolean.
        /// </summary>
        /// <value>True if CLR does not contain all the assertions known by the publisher for the learner at the time the CLR is issued. Useful if you are sending a small set of achievements in real time when they are achieved. If False or omitted, the CLR SHOULD be interpreted as containing all the assertions for the learner known by the publisher at the time of issue. Model Primitive Datatype = Boolean.</value>
        [JsonPropertyName("partial"), Newtonsoft.Json.JsonProperty("partial")]
        [Description("True if CLR does not contain all the assertions known by the publisher for the learner at the time the CLR is issued. Useful if you are sending a small set of achievements in real time when they are achieved. If False or omitted, the CLR SHOULD be interpreted as containing all the assertions for the learner known by the publisher at the time of issue. Model Primitive Datatype = Boolean.")]
        public bool? Partial { get; set; }
        
        /// <summary>
        /// Gets or Sets Publisher
        /// </summary>
        [Required]
        [JsonPropertyName("publisher"), Newtonsoft.Json.JsonProperty("publisher")]
        [Description("Publisher")]
        public virtual ProfileDType Publisher { get; set; }
        
        /// <summary>
        /// If revoked, optional reason for revocation. Model Primitive Datatype = String.
        /// </summary>
        /// <value>If revoked, optional reason for revocation. Model Primitive Datatype = String.</value>
        [JsonPropertyName("revocationReason"), Newtonsoft.Json.JsonProperty("revocationReason")]
        [Description("If revoked, optional reason for revocation. Model Primitive Datatype = String.")]
        public string RevocationReason { get; set; }
        
        /// <summary>
        /// If True the CLR is revoked. Model Primitive Datatype = Boolean.
        /// </summary>
        /// <value>If True the CLR is revoked. Model Primitive Datatype = Boolean.</value>
        [JsonPropertyName("revoked"), Newtonsoft.Json.JsonProperty("revoked")]
        [Description("If True the CLR is revoked. Model Primitive Datatype = Boolean.")]
        public bool? Revoked { get; set; }
        
        /// <summary>
        /// Signed assertions in JWS Compact Serialization format. Model Primitive Datatype = String. 
        /// </summary>
        /// <value>Signed assertions in JWS Compact Serialization format. Model Primitive Datatype = String. </value>
        [JsonPropertyName("signedAssertions"), Newtonsoft.Json.JsonProperty("signedAssertions")]
        [Description("Signed assertions in JWS Compact Serialization format. Model Primitive Datatype = String. ")]
        public List<string> SignedAssertions { get; set; }
        
        /// <summary>
        /// Gets or Sets Verification
        /// </summary>
        [JsonPropertyName("verification"), Newtonsoft.Json.JsonProperty("verification")]
        [Description("Verification")]
        public virtual VerificationDType Verification { get; set; }
        
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions { IgnoreNullValues = true });
        }
    }
}
