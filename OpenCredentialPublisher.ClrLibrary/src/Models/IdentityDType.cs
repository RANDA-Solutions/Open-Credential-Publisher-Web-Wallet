/*
 * Comprehensive Learner Record Service OpenAPI (YAML) Definition
 *
 * The Comprehensive Learner Record Service enables the exchange of data about users and their achievements between a Comprehensive Learner Record Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace OpenCredentialPublisher.ClrLibrary.Models
{
    /// <summary>
    /// A collection of information about the recipient of an achievement assertion. 
    /// </summary>
    [NotMapped]
    public partial class IdentityDType
    { 
        /// <summary>
        /// Unique IRI for the Identity. Model Primitive Datatype = NormalizedString.
        /// </summary>
        /// <value>Unique IRI for the Identity. Model Primitive Datatype = NormalizedString.</value>
        [JsonPropertyName("id"), Newtonsoft.Json.JsonProperty("id")]
        [Description("Unique IRI for the Identity. Model Primitive Datatype = NormalizedString.")]
        public string Id { get; set; }
        
        /// <summary>
        /// The type should identify the property by which the recipient of an Assertion is identified. This value should be an IRI mapped in the present context. For example, 'id' indicates that the identity property value is the id of the recipient's profile. Model Primitive Datatype = NormalizedString.
        /// </summary>
        /// <value>The type should identify the property by which the recipient of an Assertion is identified. This value should be an IRI mapped in the present context. For example, 'id' indicates that the identity property value is the id of the recipient's profile. Model Primitive Datatype = NormalizedString.</value>
        [Required]
        [JsonPropertyName("type"), Newtonsoft.Json.JsonProperty("type")]
        [Description("The type should identify the property by which the recipient of an Assertion is identified. This value should be an IRI mapped in the present context. For example, 'id' indicates that the identity property value is the id of the recipient's profile. Model Primitive Datatype = NormalizedString.")]
        public string Type { get; set; }
        
        /// <summary>
        /// Either the hash of the identity or the plaintext value. If it's possible that the plaintext transmission and storage of the identity value would leak personally identifiable information where there is an expectation of privacy, it is strongly recommended that an IdentityHash be used. Model Primitive Datatype = String.
        /// </summary>
        /// <value>Either the hash of the identity or the plaintext value. If it's possible that the plaintext transmission and storage of the identity value would leak personally identifiable information where there is an expectation of privacy, it is strongly recommended that an IdentityHash be used. Model Primitive Datatype = String.</value>
        [Required]
        [JsonPropertyName("identity"), Newtonsoft.Json.JsonProperty("identity")]
        [Description("Either the hash of the identity or the plaintext value. If it's possible that the plaintext transmission and storage of the identity value would leak personally identifiable information where there is an expectation of privacy, it is strongly recommended that an IdentityHash be used. Model Primitive Datatype = String.")]
        public string Identity { get; set; }
        
        /// <summary>
        /// Whether or not the identity value is hashed. Model Primitive Datatype = Boolean.
        /// </summary>
        /// <value>Whether or not the identity value is hashed. Model Primitive Datatype = Boolean.</value>
        [Required]
        [JsonPropertyName("hashed"), Newtonsoft.Json.JsonProperty("hashed")]
        [Description("Whether or not the identity value is hashed. Model Primitive Datatype = Boolean.")]
        public bool Hashed { get; set; }
        
        /// <summary>
        /// If the recipient is hashed, this should contain the string used to salt the hash. If this value is not provided, it should be assumed that the hash was not salted. Model Primitive Datatype = String.
        /// </summary>
        /// <value>If the recipient is hashed, this should contain the string used to salt the hash. If this value is not provided, it should be assumed that the hash was not salted. Model Primitive Datatype = String.</value>
        [JsonPropertyName("salt"), Newtonsoft.Json.JsonProperty("salt")]
        [Description("If the recipient is hashed, this should contain the string used to salt the hash. If this value is not provided, it should be assumed that the hash was not salted. Model Primitive Datatype = String.")]
        public string Salt { get; set; }

        /// <summary>
        /// Additional properties of the object
        /// </summary>
        [JsonExtensionData]
        [JsonPropertyName("additionalProperties"), Newtonsoft.Json.JsonProperty("additionalProperties")]
        public Dictionary<String, Object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, TWJson.IgnoreNulls);
        }
    }
}
