/*
 * Comprehensive Learner Record Service OpenAPI (YAML) Definition
 *
 * The Comprehensive Learner Record Service enables the exchange of data about users and their achievements between a Comprehensive Learner Record Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace OpenCredentialPublisher.ClrLibrary.Models
{ 
    /// <summary>
    /// Based on schema.org Address object. 
    /// </summary>
    public partial class AddressDType
    { 
        /// <summary>
        /// Unique IRI for the Address. Model Primitive Datatype = NormalizedString.
        /// </summary>
        /// <value>Unique IRI for the Address. Model Primitive Datatype = NormalizedString.</value>
        [JsonPropertyName("id"), Newtonsoft.Json.JsonProperty("id")]
        [Description("Unique IRI for the Address. Model Primitive Datatype = NormalizedString.")]
        public string Id { get; set; }
        
        /// <summary>
        /// The JSON-LD type of this object. Normally 'Address'. Model Primitive Datatype = NormalizedString.
        /// </summary>
        /// <value>The JSON-LD type of this object. Normally 'Address'. Model Primitive Datatype = NormalizedString.</value>
        [JsonPropertyName("type"), Newtonsoft.Json.JsonProperty("type")]
        [Description("The JSON-LD type of this object. Normally 'Address'. Model Primitive Datatype = NormalizedString.")]
        public string Type { get; set; }
        
        /// <summary>
        /// The country. For example, USA. You can also provide the two-letter ISO 3166-1 alpha-2 country code. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The country. For example, USA. You can also provide the two-letter ISO 3166-1 alpha-2 country code. Model Primitive Datatype = String.</value>
        [JsonPropertyName("addressCountry"), Newtonsoft.Json.JsonProperty("addressCountry")]
        [Description("The country. For example, USA. You can also provide the two-letter ISO 3166-1 alpha-2 country code. Model Primitive Datatype = String.")]
        public string AddressCountry { get; set; }
        
        /// <summary>
        /// The locality. For example, Mountain View. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The locality. For example, Mountain View. Model Primitive Datatype = String.</value>
        [JsonPropertyName("addressLocality"), Newtonsoft.Json.JsonProperty("addressLocality")]
        [Description("The locality. For example, Mountain View. Model Primitive Datatype = String.")]
        public string AddressLocality { get; set; }
        
        /// <summary>
        /// The region. For example, CA. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The region. For example, CA. Model Primitive Datatype = String.</value>
        [JsonPropertyName("addressRegion"), Newtonsoft.Json.JsonProperty("addressRegion")]
        [Description("The region. For example, CA. Model Primitive Datatype = String.")]
        public string AddressRegion { get; set; }
        
        /// <summary>
        /// The postal code. For example, 94043. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The postal code. For example, 94043. Model Primitive Datatype = String.</value>
        [JsonPropertyName("postalCode"), Newtonsoft.Json.JsonProperty("postalCode")]
        [Description("The postal code. For example, 94043. Model Primitive Datatype = String.")]
        public string PostalCode { get; set; }
        
        /// <summary>
        /// The post office box number for PO box addresses. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The post office box number for PO box addresses. Model Primitive Datatype = String.</value>
        [JsonPropertyName("postOfficeBoxNumber"), Newtonsoft.Json.JsonProperty("postOfficeBoxNumber")]
        [Description("The post office box number for PO box addresses. Model Primitive Datatype = String.")]
        public string PostOfficeBoxNumber { get; set; }
        
        /// <summary>
        /// The street address. For example, 1600 Amphitheater Pkwy. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The street address. For example, 1600 Amphitheatre Pkwy. Model Primitive Datatype = String.</value>
        [JsonPropertyName("streetAddress"), Newtonsoft.Json.JsonProperty("streetAddress")]
        [Description("The street address. For example, 1600 Amphitheatre Pkwy. Model Primitive Datatype = String.")]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Additional properties of the object
        /// </summary>
        [JsonExtensionData]
        [JsonPropertyName("additionalProperties"), Newtonsoft.Json.JsonProperty("additionalProperties")]
        public Dictionary<String, Object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions { IgnoreNullValues = true });
        }
    }
}
