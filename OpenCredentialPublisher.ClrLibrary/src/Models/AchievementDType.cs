/*
 * Comprehensive Learner Record Service OpenAPI (YAML) Definition
 *
 * The Comprehensive Learner Record Service enables the exchange of data about users and their achievements between a Comprehensive Learner Record Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace OpenCredentialPublisher.ClrLibrary.Models
{
    /// <summary>
    /// An accomplishment such as completing a degree, mastering a competency, or course completion that may be asserted about one or more learners. 
    /// </summary>
    [NotMapped]
    public class AchievementDType
    { 
        /// <summary>
        /// Unique IRI for the Achievement. If the id is a URL it must be the location of an Achievement document. Model Primitive Datatype = NormalizedString.
        /// </summary>
        /// <value>Unique IRI for the Achievement. If the id is a URL it must be the location of an Achievement document. Model Primitive Datatype = NormalizedString.</value>
        [Required]
        [JsonPropertyName("id"), Newtonsoft.Json.JsonProperty("id")]
        [Description("Unique IRI for the Achievement. If the id is a URL it must be the location of an Achievement document. Model Primitive Datatype = NormalizedString.")]
        public string Id { get; set; }
        
        /// <summary>
        /// The JSON-LD type of this object. Normally 'Achievement'. Model Primitive Datatype = NormalizedString.
        /// </summary>
        /// <value>The JSON-LD type of this object. Normally 'Achievement'. Model Primitive Datatype = NormalizedString.</value>
        [JsonPropertyName("type"), Newtonsoft.Json.JsonProperty("type")]
        [Description("The JSON-LD type of this object. Normally 'Achievement'. Model Primitive Datatype = NormalizedString.")]
        public string Type { get; set; }
        
        /// <summary>
        /// A CLR Achievement can represent many different types of achievement from an assessment result to membership. Use 'Achievement' to indicate an achievement not in the list of allowed values. 
        /// </summary>
        /// <value>A CLR Achievement can represent many different types of achievement from an assessment result to membership. Use 'Achievement' to indicate an achievement not in the list of allowed values. </value>
        [JsonPropertyName("achievementType"), Newtonsoft.Json.JsonProperty("achievementType")]
        [Description("A CLR Achievement can represent many different types of achievement from an assessment result to membership. Use 'Achievement' to indicate an achievement not in the list of allowed values. ")]
        public virtual string AchievementType { get; set; }

        [JsonPropertyName("alignments"), Newtonsoft.Json.JsonProperty("alignments")]
        [Description("Alignment objects describe an alignment between this achievement and a node in an educational framework. ")]
        /// <summary>
        /// Alignment objects describe an alignment between this achievement and a node in an educational framework. 
        /// </summary>
        /// <value>Alignment objects describe an alignment between this achievement and a node in an educational framework. </value>
        public virtual List<AlignmentDType> Alignments { get; set; }
        [JsonPropertyName("associations"), Newtonsoft.Json.JsonProperty("associations")]
        [Description("Associations between this achievement and other achievements. ")]
        /// <summary>
        /// Associations between this achievement and other achievements. 
        /// </summary>
        /// <value>Associations between this achievement and other achievements. </value>
        public virtual List<AssociationDType> Associations { get; set; }
        
        /// <summary>
        /// Credit hours associated with this entity, or credit hours possible. For example '3.0'. Model Primitive Datatype = Float.
        /// </summary>
        /// <value>Credit hours associated with this entity, or credit hours possible. For example '3.0'. Model Primitive Datatype = Float.</value>
        [JsonPropertyName("creditsAvailable"), Newtonsoft.Json.JsonProperty("creditsAvailable")]
        [Description("Credit hours associated with this entity, or credit hours possible. For example '3.0'. Model Primitive Datatype = Float.")]
        public float? CreditsAvailable { get; set; }
        
        /// <summary>
        /// A short description of the achievement. May be the same as name if no description is available. Model Primitive Datatype = String.
        /// </summary>
        /// <value>A short description of the achievement. May be the same as name if no description is available. Model Primitive Datatype = String.</value>
        [JsonPropertyName("description"), Newtonsoft.Json.JsonProperty("description")]
        [Description("A short description of the achievement. May be the same as name if no description is available. Model Primitive Datatype = String.")]
        public string Description { get; set; }

        [JsonPropertyName("endorsements"), Newtonsoft.Json.JsonProperty("endorsements")]
        [Description("Allows endorsers to make specific claims about the Achievement. ")]
        /// <summary>
        /// Allows endorsers to make specific claims about the Achievement. 
        /// </summary>
        /// <value>Allows endorsers to make specific claims about the Achievement. </value>
        public virtual List<EndorsementDType> Endorsements { get; set; }
        
        /// <summary>
        /// The code, generally human readable, associated with an achievement. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The code, generally human readable, associated with an achievement. Model Primitive Datatype = String.</value>
        [JsonPropertyName("humanCode"), Newtonsoft.Json.JsonProperty("humanCode")]
        [Description("The code, generally human readable, associated with an achievement. Model Primitive Datatype = String.")]
        public string HumanCode { get; set; }

        [JsonPropertyName("identifiers"), Newtonsoft.Json.JsonProperty("identifiers")]
        [Description("A set of System Identifiers that represent other identifiers for this Achievement.")]
        
        public List<SystemIdentifierDType> Identifiers { get; set; }

        /// <summary>
        /// The name of the achievement. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The name of the achievement. Model Primitive Datatype = String.</value>
        [Required]
        [JsonPropertyName("name"), Newtonsoft.Json.JsonProperty("name")]
        [Description("The name of the achievement. Model Primitive Datatype = String.")]
        public string Name { get; set; }
        
        /// <summary>
        /// Category, subject, area of study,  discipline, or general branch of knowledge. Examples include Business, Education, Psychology, and Technology.  Model Primitive Datatype = String.
        /// </summary>
        /// <value>Category, subject, area of study,  discipline, or general branch of knowledge. Examples include Business, Education, Psychology, and Technology.  Model Primitive Datatype = String.</value>
        [JsonPropertyName("fieldOfStudy"), Newtonsoft.Json.JsonProperty("fieldOfStudy")]
        [Description("Category, subject, area of study,  discipline, or general branch of knowledge. Examples include Business, Education, Psychology, and Technology.  Model Primitive Datatype = String.")]
        public string FieldOfStudy { get; set; }
        
        /// <summary>
        /// IRI of an image representing the achievement. May be a Data URI or the URL where the image may be found. Model Primitive Datatype = NormalizedString.
        /// </summary>
        /// <value>IRI of an image representing the achievement. May be a Data URI or the URL where the image may be found. Model Primitive Datatype = NormalizedString.</value>
        [JsonPropertyName("image"), Newtonsoft.Json.JsonProperty("image")]
        [Description("IRI of an image representing the achievement. May be a Data URI or the URL where the image may be found. Model Primitive Datatype = NormalizedString.")]
        public string Image { get; set; }

        [Required]
        [JsonPropertyName("issuer"), Newtonsoft.Json.JsonProperty("issuer")]
        [Description("Issuer")]
        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        public virtual ProfileDType Issuer { get; set; }
        
        /// <summary>
        /// Text that describes the level of achievement apart from how the achievement was performed or demonstrated. Examples would include 'Level 1', 'Level 2', 'Level 3', or 'Bachelors', 'Masters', 'Doctoral'. Model Primitive Datatype = String.
        /// </summary>
        /// <value>Text that describes the level of achievement apart from how the achievement was performed or demonstrated. Examples would include 'Level 1', 'Level 2', 'Level 3', or 'Bachelors', 'Masters', 'Doctoral'. Model Primitive Datatype = String.</value>
        [JsonPropertyName("level"), Newtonsoft.Json.JsonProperty("level")]
        [Description("Text that describes the level of achievement apart from how the achievement was performed or demonstrated. Examples would include 'Level 1', 'Level 2', 'Level 3', or 'Bachelors', 'Masters', 'Doctoral'. Model Primitive Datatype = String.")]
        public string Level { get; set; }

        [JsonPropertyName("requirement"), Newtonsoft.Json.JsonProperty("requirement")]
        [Description("Requirement")]
        /// <summary>
        /// Gets or Sets Requirement
        /// </summary>
        public virtual CriteriaDType Requirement { get; set; }

        [JsonPropertyName("resultDescriptions"), Newtonsoft.Json.JsonProperty("resultDescriptions")]
        [Description("The set of result descriptions that may be asserted as results with this achievement. ")]
        /// <summary>
        /// The set of result descriptions that may be asserted as results with this achievement. 
        /// </summary>
        /// <value>The set of result descriptions that may be asserted as results with this achievement. </value>
        public virtual List<ResultDescriptionDType> ResultDescriptions { get; set; }
        [JsonPropertyName("signedEndorsements"), Newtonsoft.Json.JsonProperty("signedEndorsements")]
        [Description("Signed endorsements in JWS Compact Serialization format. Model Primitive Datatype = String. ")]
        /// <summary>
        /// Signed endorsements in JWS Compact Serialization format. Model Primitive Datatype = String. 
        /// </summary>
        /// <value>Signed endorsements in JWS Compact Serialization format. Model Primitive Datatype = String. </value>
        public List<string> SignedEndorsements { get; set; }
        
        /// <summary>
        /// Name given to the focus, concentration, or specific area of study defined in the achievement. Examples include Entrepreneurship, Technical Communication, and Finance. Model Primitive Datatype = String.
        /// </summary>
        /// <value>Name given to the focus, concentration, or specific area of study defined in the achievement. Examples include Entrepreneurship, Technical Communication, and Finance. Model Primitive Datatype = String.</value>
        [JsonPropertyName("specialization"), Newtonsoft.Json.JsonProperty("specialization")]
        [Description("Name given to the focus, concentration, or specific area of study defined in the achievement. Examples include Entrepreneurship, Technical Communication, and Finance. Model Primitive Datatype = String.")]
        public string Specialization { get; set; }

        [JsonPropertyName("tags"), Newtonsoft.Json.JsonProperty("tags")]
        [Description("Tags that describe the type of achievement. Model Primitive Datatype = String.")]
        /// <summary>
        /// Tags that describe the type of achievement. Model Primitive Datatype = String.
        /// </summary>
        /// <value>Tags that describe the type of achievement. Model Primitive Datatype = String.</value>
        public List<string> Tags { get; set; }
        [JsonExtensionData]
        [JsonPropertyName("additionalProperties"), Newtonsoft.Json.JsonProperty("additionalProperties")]
        /// <summary>
        /// Additional properties of the object
        /// </summary>
        public Dictionary<String, Object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, TWJson.IgnoreNulls);
        }
    }
}
