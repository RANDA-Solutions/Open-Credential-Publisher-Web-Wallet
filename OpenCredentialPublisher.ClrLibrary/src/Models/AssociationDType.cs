/*
 * Comprehensive Learner Record Service OpenAPI (YAML) Definition
 *
 * The Comprehensive Learner Record Service enables the exchange of data about users and their achievements between a Comprehensive Learner Record Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using System.Text.Json.Serialization;
using OpenCredentialPublisher.ClrLibrary.Converters;
// ReSharper disable UnusedMember.Global

namespace OpenCredentialPublisher.ClrLibrary.Models
{ 
    /// <summary>
    /// Association is based on the CASE AssociationLink object. An Association associates (relates) one Achievement with another Achievement. 
    /// </summary>
    public partial class AssociationDType
    { 
        /// <summary>
        /// The type of association. This uses an enumerated vocabulary. 
        /// </summary>
        /// <value>The type of association. This uses an enumerated vocabulary. </value>
        [TypeConverter(typeof(Converters.Newtonsoft.CustomEnumConverter<AssociationTypeEnum>))]
        [JsonConverter(typeof(Converters.Json.StringEnumConverter<AssociationTypeEnum>))]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AssociationTypeEnum
        {
            
            /// <summary>
            /// Enum ExactMatchOfEnum for exactMatchOf
            /// </summary>
            [EnumMember(Value = "exactMatchOf")]
            ExactMatchOfEnum = 1,
            
            /// <summary>
            /// Enum ExemplarEnum for exemplar
            /// </summary>
            [EnumMember(Value = "exemplar")]
            ExemplarEnum = 2,
            
            /// <summary>
            /// Enum HasSkillLevelEnum for hasSkillLevel
            /// </summary>
            [EnumMember(Value = "hasSkillLevel")]
            HasSkillLevelEnum = 3,
            
            /// <summary>
            /// Enum IsChildOfEnum for isChildOf
            /// </summary>
            [EnumMember(Value = "isChildOf")]
            IsChildOfEnum = 4,
            
            /// <summary>
            /// Enum IsParentOfEnum for isParentOf
            /// </summary>
            [EnumMember(Value = "isParentOf")]
            IsParentOfEnum = 5,
            
            /// <summary>
            /// Enum IsPartOfEnum for isPartOf
            /// </summary>
            [EnumMember(Value = "isPartOf")]
            IsPartOfEnum = 6,
            
            /// <summary>
            /// Enum IsPeerOfEnum for isPeerOf
            /// </summary>
            [EnumMember(Value = "isPeerOf")]
            IsPeerOfEnum = 7,
            
            /// <summary>
            /// Enum IsRelatedToEnum for isRelatedTo
            /// </summary>
            [EnumMember(Value = "isRelatedTo")]
            IsRelatedToEnum = 8,
            
            /// <summary>
            /// Enum PrecedesEnum for precedes
            /// </summary>
            [EnumMember(Value = "precedes")]
            PrecedesEnum = 9,
            
            /// <summary>
            /// Enum ReplacedByEnum for replacedBy
            /// </summary>
            [EnumMember(Value = "replacedBy")]
            ReplacedByEnum = 10
        }

        /// <summary>
        /// The type of association. This uses an enumerated vocabulary. 
        /// </summary>
        /// <value>The type of association. This uses an enumerated vocabulary. </value>
        [Required]
        [JsonPropertyName("associationType"), Newtonsoft.Json.JsonProperty("associationType")]
        [Description("The type of association. This uses an enumerated vocabulary. ")]
        public AssociationTypeEnum AssociationType { get; set; }
        
        /// <summary>
        /// The '@id' of another achievement, or target of the association. Model Primitive Datatype = NormalizedString.
        /// </summary>
        /// <value>The '@id' of another achievement, or target of the association. Model Primitive Datatype = NormalizedString.</value>
        [Required]
        [JsonPropertyName("targetId"), Newtonsoft.Json.JsonProperty("targetId")]
        [Description("The '@id' of another achievement, or target of the association. Model Primitive Datatype = NormalizedString.")]
        public string TargetId { get; set; }
        
        /// <summary>
        /// A human readable title for the associated achievement. Model Primitive Datatype = String.
        /// </summary>
        /// <value>A human readable title for the associated achievement. Model Primitive Datatype = String.</value>
        [Required]
        [JsonPropertyName("title"), Newtonsoft.Json.JsonProperty("title")]
        [Description("A human readable title for the associated achievement. Model Primitive Datatype = String.")]
        public string Title { get; set; }
        
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions { IgnoreNullValues = true });
        }
    }
}
