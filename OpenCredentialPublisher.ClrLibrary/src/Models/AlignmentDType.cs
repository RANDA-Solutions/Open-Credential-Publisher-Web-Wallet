/*
 * Comprehensive Learner Record Service OpenAPI (YAML) Definition
 *
 * The Comprehensive Learner Record Service enables the exchange of data about users and their achievements between a Comprehensive Learner Record Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace OpenCredentialPublisher.ClrLibrary.Models
{
    /// <summary>
    /// Alignment is based on the schema.org AlignmentObject. 
    /// </summary>
    [NotMapped]
    public partial class AlignmentDType
    { 
        /// <summary>
        /// Unique IRI for the object. Model Primitive Datatype = NormalizedString.
        /// </summary>
        /// <value>Unique IRI for the object. Model Primitive Datatype = NormalizedString.</value>
        [JsonPropertyName("id"), Newtonsoft.Json.JsonProperty("id")]
        [Description("Unique IRI for the object. Model Primitive Datatype = NormalizedString.")]
        public string Id { get; set; }
        
        /// <summary>
        /// The JSON-LD type of this entity. Normally 'Alignment'. Model Primitive Datatype = NormalizedString.
        /// </summary>
        /// <value>The JSON-LD type of this entity. Normally 'Alignment'. Model Primitive Datatype = NormalizedString.</value>
        [JsonPropertyName("type"), Newtonsoft.Json.JsonProperty("type")]
        [Description("The JSON-LD type of this entity. Normally 'Alignment'. Model Primitive Datatype = NormalizedString.")]
        public string Type { get; set; }
        
        /// <summary>
        /// The name of the framework to which the resource being described is aligned. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The name of the framework to which the resource being described is aligned. Model Primitive Datatype = String.</value>
        [JsonPropertyName("educationalFramework"), Newtonsoft.Json.JsonProperty("educationalFramework")]
        [Description("The name of the framework to which the resource being described is aligned. Model Primitive Datatype = String.")]
        public string EducationalFramework { get; set; }
        
        /// <summary>
        /// If applicable, a locally unique string identifier that identifies the alignment target within its framework. Model Primitive Datatype = String.
        /// </summary>
        /// <value>If applicable, a locally unique string identifier that identifies the alignment target within its framework. Model Primitive Datatype = String.</value>
        [JsonPropertyName("targetCode"), Newtonsoft.Json.JsonProperty("targetCode")]
        [Description("If applicable, a locally unique string identifier that identifies the alignment target within its framework. Model Primitive Datatype = String.")]
        public string TargetCode { get; set; }
        
        /// <summary>
        /// The description of a node in an established educational framework. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The description of a node in an established educational framework. Model Primitive Datatype = String.</value>
        [JsonPropertyName("targetDescription"), Newtonsoft.Json.JsonProperty("targetDescription")]
        [Description("The description of a node in an established educational framework. Model Primitive Datatype = String.")]
        public string TargetDescription { get; set; }
        
        /// <summary>
        /// The name of a node in an established educational framework. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The name of a node in an established educational framework. Model Primitive Datatype = String.</value>
        [Required]
        [JsonPropertyName("targetName"), Newtonsoft.Json.JsonProperty("targetName")]
        [Description("The name of a node in an established educational framework. Model Primitive Datatype = String.")]
        public string TargetName { get; set; }
        
        /// <summary>
        /// The type of the alignment target node. This is an extensible enumerated vocabulary. Extending the vocabulary makes use of a naming convention. 
        /// </summary>
        /// <value>The type of the alignment target node. This is an extensible enumerated vocabulary. Extending the vocabulary makes use of a naming convention. </value>
        [Required]
        [JsonPropertyName("targetType"), Newtonsoft.Json.JsonProperty("targetType")]
        [Description("The type of the alignment target node. This is an extensible enumerated vocabulary. Extending the vocabulary makes use of a naming convention. ")]
        public virtual string TargetType { get; set; }
        
        /// <summary>
        /// The URL of a node in an established educational framework. When the alignment is to a CASE framework and the CASE Service support the CASE JSON-LD binding, the URL should be the 'uri' of the node document, otherwise the URL should be the CASE Service endpoint URL that returns the node JSON. Model Primitive Datatype = AnyURI.
        /// </summary>
        /// <value>The URL of a node in an established educational framework. When the alignment is to a CASE framework and the CASE Service support the CASE JSON-LD binding, the URL should be the 'uri' of the node document, otherwise the URL should be the CASE Service endpoint URL that returns the node JSON. Model Primitive Datatype = AnyURI.</value>
        [Required]
        [JsonPropertyName("targetUrl"), Newtonsoft.Json.JsonProperty("targetUrl")]
        [Description("The URL of a node in an established educational framework. When the alignment is to a CASE framework and the CASE Service support the CASE JSON-LD binding, the URL should be the 'uri' of the node document, otherwise the URL should be the CASE Service endpoint URL that returns the node JSON. Model Primitive Datatype = AnyURI.")]
        public string TargetUrl { get; set; }

        /// <summary>
        /// Additional properties of the object
        /// </summary>
        [JsonExtensionData]
        [JsonPropertyName("additionalProperties"), Newtonsoft.Json.JsonProperty("additionalProperties")]
        public Dictionary<String, Object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, TWJson.IgnoreNulls);
        }
    }
}
