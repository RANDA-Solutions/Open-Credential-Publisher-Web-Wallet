/*
 * Comprehensive Learner Record Service OpenAPI (YAML) Definition
 *
 * The Comprehensive Learner Record Service enables the exchange of data about users and their achievements between a Comprehensive Learner Record Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://openapi-generator.tech
 */

using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace OpenCredentialPublisher.ClrLibrary.Models
{ 
    /// <summary>
    /// Describes a possible achievement result. 
    /// </summary>
    public partial class ResultDescriptionDType
    { 
        /// <summary>
        /// Unique IRI for the ResultDescription. Model Primitive Datatype = NormalizedString.
        /// </summary>
        /// <value>Unique IRI for the ResultDescription. Model Primitive Datatype = NormalizedString.</value>
        [Required]
        [JsonPropertyName("id"), Newtonsoft.Json.JsonProperty("id")]
        [Description("Unique IRI for the ResultDescription. Model Primitive Datatype = NormalizedString.")]
        public string Id { get; set; }
        
        /// <summary>
        /// The JSON-LD type of this object. Normally 'ResultDescription'. Model Primitive Datatype = NormalizedString.
        /// </summary>
        /// <value>The JSON-LD type of this object. Normally 'ResultDescription'. Model Primitive Datatype = NormalizedString.</value>
        [JsonPropertyName("type"), Newtonsoft.Json.JsonProperty("type")]
        [Description("The JSON-LD type of this object. Normally 'ResultDescription'. Model Primitive Datatype = NormalizedString.")]
        public string Type { get; set; }
        
        /// <summary>
        /// The alignments between this result description and nodes in external frameworks. 
        /// </summary>
        /// <value>The alignments between this result description and nodes in external frameworks. </value>
        [JsonPropertyName("alignments"), Newtonsoft.Json.JsonProperty("alignments")]
        [Description("The alignments between this result description and nodes in external frameworks. ")]
        public virtual List<AlignmentDType> Alignments { get; set; }
        
        /// <summary>
        /// The ordered from 'low' to 'high' set of allowed values. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The ordered from 'low' to 'high' set of allowed values. Model Primitive Datatype = String.</value>
        [JsonPropertyName("allowedValues"), Newtonsoft.Json.JsonProperty("allowedValues")]
        [Description("The ordered from 'low' to 'high' set of allowed values. Model Primitive Datatype = String.")]
        public List<string> AllowedValues { get; set; }
        
        /// <summary>
        /// The name of the result. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The name of the result. Model Primitive Datatype = String.</value>
        [Required]
        [JsonPropertyName("name"), Newtonsoft.Json.JsonProperty("name")]
        [Description("The name of the result. Model Primitive Datatype = String.")]
        public string Name { get; set; }
        
        /// <summary>
        /// The id of the RubricCriterionLevel required to 'pass'. Model Primitive Datatype = NormalizedString.
        /// </summary>
        /// <value>The id of the RubricCriterionLevel required to 'pass'. Model Primitive Datatype = NormalizedString.</value>
        [JsonPropertyName("requiredLevel"), Newtonsoft.Json.JsonProperty("requiredLevel")]
        [Description("The id of the RubricCriterionLevel required to 'pass'. Model Primitive Datatype = NormalizedString.")]
        public string RequiredLevel { get; set; }
        
        /// <summary>
        /// The value from allowedValues required to 'pass'. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The value from allowedValues required to 'pass'. Model Primitive Datatype = String.</value>
        [JsonPropertyName("requiredValue"), Newtonsoft.Json.JsonProperty("requiredValue")]
        [Description("The value from allowedValues or within the range of valueMin to valueMax required to 'pass'.")]
        public string RequiredValue { get; set; }
        
        /// <summary>
        /// The type of result. This is an extensible enumerated vocabulary. 
        /// </summary>
        /// <value>The type of result. This is an extensible enumerated vocabulary. </value>
        [Required]
        [JsonPropertyName("resultType"), Newtonsoft.Json.JsonProperty("resultType")]
        [Description("The type of result. This is an extensible enumerated vocabulary. ")]
        public virtual string ResultType { get; set; }
        
        /// <summary>
        /// The ordered from 'low' to 'high' set of rubric criterion levels that may be asserted. 
        /// </summary>
        /// <value>The ordered from 'low' to 'high' set of rubric criterion levels that may be asserted. </value>
        [JsonPropertyName("rubricCriterionLevels"), Newtonsoft.Json.JsonProperty("rubricCriterionLevels")]
        [Description("The ordered from 'low' to 'high' set of rubric criterion levels that may be asserted. ")]
        public virtual List<RubricCriterionLevelDType> RubricCriterionLevels { get; set; }
        
        /// <summary>
        /// The maximum possible result that may be asserted. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The maximum possible result that may be asserted. Model Primitive Datatype = String.</value>
        [JsonPropertyName("valueMax"), Newtonsoft.Json.JsonProperty("valueMax")]
        [Description("The maximum possible result that may be asserted. Model Primitive Datatype = String.")]
        public string ValueMax { get; set; }
        
        /// <summary>
        /// The minimum possible result that may be asserted. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The minimum possible result that may be asserted. Model Primitive Datatype = String.</value>
        [JsonPropertyName("valueMin"), Newtonsoft.Json.JsonProperty("valueMin")]
        [Description("The minimum possible result that may be asserted. Model Primitive Datatype = String.")]
        public string ValueMin { get; set; }
        
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions { IgnoreNullValues = true });
        }
    }
}
