/*
 * Comprehensive Learner Record Service OpenAPI (YAML) Definition
 *
 * The Comprehensive Learner Record Service enables the exchange of data about users and their achievements between a Comprehensive Learner Record Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://openapi-generator.tech
 */

using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace OpenCredentialPublisher.ClrLibrary.Models
{ 
    /// <summary>
    /// Configuration information about the provider implementation. 
    /// </summary>
    public partial class DiscoveryDocumentDType
    { 
        /// <summary>
        /// URL to the JSON-LD context file.
        /// </summary>
        /// <value>URL to the JSON-LD context file.</value>
        [JsonPropertyName("@context"), Newtonsoft.Json.JsonProperty("@context")]
        [Description("URL to the JSON-LD context file.")]
        public string Context { get; set; }
        
        /// <summary>
        /// A fully qualified URL to the provider's OAuth 2.0 Authorization endpoint. Model Primitive Datatype = AnyURI.
        /// </summary>
        /// <value>A fully qualified URL to the provider's OAuth 2.0 Authorization endpoint. Model Primitive Datatype = AnyURI.</value>
        [Required]
        [JsonPropertyName("authorizationUrl"), Newtonsoft.Json.JsonProperty("authorizationUrl")]
        [Description("A fully qualifed URL to the provider's OAuth 2.0 Authorization endpoint. Model Primitive Datatype = AnyURI.")]
        public string AuthorizationUrl { get; set; }
        
        /// <summary>
        /// An image representing the provider. May be a Data URI or the URL where the image may be found. Model Primitive Datatype = NormalizedString.
        /// </summary>
        /// <value>An image representing the provider. May be a Data URI or the URL where the image may be found. Model Primitive Datatype = NormalizedString.</value>
        [JsonPropertyName("image"), Newtonsoft.Json.JsonProperty("image")]
        [Description("An image representing the provider. May be a Data URI or the URL where the image may be found. Model Primitive Datatype = NormalizedString.")]
        public string Image { get; set; }
        
        /// <summary>
        /// The user-facing name of the platform providing CLR services. Model Primitive Datatype = String.
        /// </summary>
        /// <value>The user-facing name of the platform providing CLR services. Model Primitive Datatype = String.</value>
        [Required]
        [JsonPropertyName("name"), Newtonsoft.Json.JsonProperty("name")]
        [Description("The user-facing name of the platform providing CLR services. Model Primitive Datatype = String.")]
        public string Name { get; set; }
        
        /// <summary>
        /// A fully qualified URL to the provider's privacy policy. Model Primitive Datatype = AnyURI.
        /// </summary>
        /// <value>A fully qualified URL to the provider's privacy policy. Model Primitive Datatype = AnyURI.</value>
        [Required]
        [JsonPropertyName("privacyPolicyUrl"), Newtonsoft.Json.JsonProperty("privacyPolicyUrl")]
        [Description("A fully qualified URL to the provider's privacy policy. Model Primitive Datatype = AnyURI.")]
        public string PrivacyPolicyUrl { get; set; }
        
        /// <summary>
        /// A fully qualified URL to the provider's OAuth 2.0 Registration endpoint. Model Primitive Datatype = AnyURI.
        /// </summary>
        /// <value>A fully qualified URL to the provider's OAuth 2.0 Registration endpoint. Model Primitive Datatype = AnyURI.</value>
        [Required]
        [JsonPropertyName("registrationUrl"), Newtonsoft.Json.JsonProperty("registrationUrl")]
        [Description("A fully qualified URL to the provider's OAuth 2.0 Registration endpoint. Model Primitive Datatype = AnyURI.")]
        public string RegistrationUrl { get; set; }
        
        /// <summary>
        /// An array of OAuth 2.0 Scopes supported by the provider. Model Primitive Datatype = AnyURI.
        /// </summary>
        /// <value>An array of OAuth 2.0 Scopes supported by the provider. Model Primitive Datatype = AnyURI.</value>
        [Required]
        [JsonPropertyName("scopesOffered"), Newtonsoft.Json.JsonProperty("scopesOffered")]
        [Description("An array of OAuth 2.0 Scopes supported by the provider. Model Primitive Datatype = AnyURI.")]
        public List<string> ScopesOffered { get; set; }
        
        /// <summary>
        /// A fully qualified URL to the provider's terms of service. Model Primitive Datatype = AnyURI.
        /// </summary>
        /// <value>A fully qualified URL to the provider's terms of service. Model Primitive Datatype = AnyURI.</value>
        [Required]
        [JsonPropertyName("termsOfServiceUrl"), Newtonsoft.Json.JsonProperty("termsOfServiceUrl")]
        [Description("A fully qualified URL to the provider's terms of service. Model Primitive Datatype = AnyURI.")]
        public string TermsOfServiceUrl { get; set; }
        
        /// <summary>
        /// A fully qualified URL to the provider's OAuth 2.0 Token endpoint. Model Primitive Datatype = AnyURI.
        /// </summary>
        /// <value>A fully qualified URL to the provider's OAuth 2.0 Token endpoint. Model Primitive Datatype = AnyURI.</value>
        [Required]
        [JsonPropertyName("tokenUrl"), Newtonsoft.Json.JsonProperty("tokenUrl")]
        [Description("A fully qualified URL to the provider's OAuth 2.0 Token endpoint. Model Primitive Datatype = AnyURI.")]
        public string TokenUrl { get; set; }
        
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions { IgnoreNullValues = true });
        }
    }
}
