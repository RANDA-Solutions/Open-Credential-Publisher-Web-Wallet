@using OpenCredentialPublisher.Data.ViewModels.Credentials;
@model AssertionViewModel
@using Newtonsoft 

@{ var assertionVM = Model;}

@functions {
    private async Task Show(string label, string value)
    {
        @if (!String.IsNullOrEmpty(value))
        {
        <div class="col my-2">
            <div class="h-color-gray">@label</div>
            <div>@Html.Raw(value)</div>
        </div>
        }
    }
}

<div class="mt-3 assertion-section p-3">
    <div class="row assertion-header">
        <div class="col my-2-sm-5"><span style="margin-right:15px;"><i class="fas fa-1x fa-angle-right"></i></span> @assertionVM.AchievementVM?.Achievement.Name</div>
        <div class="col my-2"></div>
        @if (assertionVM.Assertion.IssuedOn.HasValue && !assertionVM.Assertion.IssuedOn.Equals(default(DateTime)))
        {
        <div class="col my-2-sm-2 h-color-gray text-right">ISSUED ON</div>
        <div class="col my-2-sm-2"><b>@assertionVM.Assertion.IssuedOn?.ToString("MM/dd/yyyy", System.Globalization.CultureInfo.CreateSpecificCulture("de-DE"))</b></div>
        }
    </div>


</div>

<div class="p-3 collapsed assertion-info">
    <div class="row">
        <div class="col my-2-sm-12">
            <table class="table">
                <tr>
                    <th style="width:25%;">TYPE</th>
                    <th style="width:25%;">DATE</th>
                    <th style="width:25%;">STATUS</th>
                    <th style="width:25%;">ISSUER</th>
                </tr>
                <tr data-toggle="modal" data-name="@assertionVM.AchievementVM?.Achievement.Name" class="assertion-row cursor">
                    <td>@assertionVM.AchievementVM?.Achievement.AchievementType</td>
                    <td>
                        @if (assertionVM.Assertion.IssuedOn != null && !assertionVM.Assertion.IssuedOn.Equals(default(DateTime)))
                        {
                        @assertionVM.Assertion.IssuedOn?.ToString("MM/dd/yyyy", System.Globalization.CultureInfo.CreateSpecificCulture("de-DE"))
                        }
                    </td>
                    <td></td>
                    <td>@assertionVM.AchievementVM?.Achievement?.Issuer?.Name</td>
                </tr>
                @if (assertionVM.AchievementVM?.Achievement?.ResultDescriptions != null)
                {
                    <tr style="">
                        <td class="assertion-results-col my-2-1" style="border-top:none;padding-top:0;padding-left:35px;">RESULTS</td>
                        <td class="assertion-results-col my-2-1" colspan="3" style="border-top:none;padding-top:0;">
                            @foreach (var result in assertionVM.AchievementVM?.Achievement?.ResultDescriptions)
                            {
                                var resultValue = assertionVM.Assertion.Results.Where(x => x.ResultDescription == result?.Id).FirstOrDefault();
                                <ul style="list-style-type:none;margin:0;padding:0">
                                    <li style="color:#BABABA"><div style="width:210px; margin-right:5px;float:left;">@result?.Name</div>@resultValue?.Value</li>
                                </ul>
                            }
                        </td>
                    </tr>
                }
            </table>
            <div class="assertion-details d-none">
                <div class="row row-cols-4">
                    @{ await Show("ISSUE DATE", assertionVM.Assertion?.IssuedOn?.ToString("MM/dd/yyyy", System.Globalization.CultureInfo.CreateSpecificCulture("de-DE")));
                        await Show("SOURCE ID", assertionVM.Assertion?.Achievement?.Issuer?.SourcedId);
                        await Show("TYPE", assertionVM.AchievementVM?.Achievement?.AchievementType);
                        await Show("FIELD STUDY", assertionVM.AchievementVM?.Achievement?.FieldOfStudy);
                        await Show("DESCRIPTION", assertionVM.AchievementVM?.Achievement?.Description);
                        await Show("REQUIREMENT", assertionVM.AchievementVM?.Achievement?.Requirement?.Narrative);
                        await Show("NARRATIVE", assertionVM.Assertion?.Narrative);
                        await Show("TERM", assertionVM.Assertion?.Term);
                        await Show("CREDITS EARNED", assertionVM.Assertion?.CreditsEarned.ToString());
                        await Show("CREDITS AVAILABLE", assertionVM.AchievementVM?.Achievement?.CreditsAvailable.ToString());
                        await Show("LEVEL", assertionVM.AchievementVM?.Achievement?.Level);
                        var tags = assertionVM.AchievementVM?.Achievement?.Tags == null ? String.Empty : String.Join(",", assertionVM.AchievementVM?.Achievement?.Tags.ToArray());
                        await Show("TAGS", tags);

                        var address = $"{assertionVM.AchievementVM?.Achievement?.Issuer?.Name}<br/>{assertionVM.AchievementVM?.Achievement?.Issuer?.Address?.StreetAddress}<br/>{assertionVM.AchievementVM?.Achievement?.Issuer?.Address?.AddressLocality}, {assertionVM.AchievementVM?.Achievement?.Issuer?.Address?.AddressRegion} {assertionVM.AchievementVM?.Achievement?.Issuer?.Address?.PostalCode}";
                        await Show("ISSUED BY", address);
                        await Show("ISSUER CONTACT", assertionVM.AchievementVM?.Achievement?.Issuer?.Telephone);

                        @foreach (var props in Model.Assertion.AdditionalProperties)
                        {

                            if (props.Value != null)
                            {
                                await Show(props.Key, Json.Serialize(props.Value).ToString());
                            }
                        }
                        }
                </div>
            </div>
        </div>

    </div>
</div>


