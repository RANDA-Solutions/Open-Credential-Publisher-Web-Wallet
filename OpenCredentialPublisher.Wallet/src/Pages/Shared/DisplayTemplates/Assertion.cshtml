@using OpenCredentialPublisher.ClrLibrary.Models
@using OpenCredentialPublisher.Data.ViewModels.Credentials
@using Microsoft.AspNetCore.Mvc.Rendering
@using OpenCredentialPublisher.ClrLibrary.Extensions
@model AssociatedAssertionViewModel

<div class="mt-3 mb-3">
    <div class="card">
        @{
           @* var headerColor = Model.Revoked != null && Model.Revoked.Value ? "bg-danger"
                : Model.EndDate.HasValue && Model.EndDate < DateTime.UtcNow ? "bg-danger"
                : Model.Achievement.Issuer.Id == Model.ClrVM.RawClrDType.Learner.Id ? "bg-warning"
                : "bg-info";*@
            var headerColor = "bg-info";
        }
        <button class="card-header h5 text-left @headerColor" id="assertionHeader-@Model.Id.SafeId()" data-toggle="collapse" data-target="#assertionBody-@Model.Id.SafeId()">
            @Html.Raw(Model.Achievement.HumanCode != null ? Model.Achievement.HumanCode + ": " + Model.Achievement.Name : Model.Achievement.Name)
        </button>
        <div id="assertionBody-@Model.Id.SafeId()" class="collapse">
            <div class="card-body card-deck">
                @if (Model.Image != null)
                {
                    <div class="card border-0" style="max-width: 100px">
                        @if (Model.Image.StartsWith("data:"))
                        {
                            <button class="btn btn-link" onclick='exportToView("@Model.Image")'>View Image</button>
                        }
                        else
                        {
                            <img src="@Model.Image" alt="@Model.Achievement.Name" style="max-width: 100px" />
                        }

                    </div>
                }
                else if (Model.Achievement?.Image != null)
                {
                    <div class="card border-0" style="max-width: 100px">
                        <img src="@Model.Achievement.Image" style="max-width: 100px" />
                    </div>
                }
                <div class="card border-0">
                    <dl class="row">
                        <dt class="col-12 col-sm-4 col-md-3">Id</dt>
                        <dd class="col-12 col-sm-8 col-md-9">@Html.DisplayFor(x => x.Id, "Uri")</dd>
                        @if (Model.CreditsEarned != null)
                        {
                            <dt class="col-12 col-sm-4 col-md-3">Credits Earned</dt>
                            <dd class="col-12 col-sm-8 col-md-9">@Model.CreditsEarned</dd>
                        }
                        @if (Model.ActivityEndDate != null)
                        {
                            <dt class="col-12 col-sm-4 col-md-3">End Date</dt>
                            <dd class="col-12 col-sm-8 col-md-9">@Model.ActivityEndDate</dd>
                        }
                        <dt class="col-12 col-sm-4 col-md-3">Issued</dt>
                        <dd class="col-12 col-sm-8 col-md-9">@Model.IssuedOn</dd>
                        @if (Model.LicenseNumber != null)
                        {
                            <dt class="col-12 col-sm-4 col-md-3">License Number</dt>
                            <dd class="col-12 col-sm-8 col-md-9">@Model.LicenseNumber</dd>
                        }
                        @if (Model.Narrative != null)
                        {
                            <dt class="col-12 col-sm-4 col-md-3">Narrative</dt>
                            <dd class="col-12 col-sm-8 col-md-9 markdown">@Html.Raw(Model.Narrative)</dd>
                        }
                        @if (Model.Recipient != null)
                        {
                            <dt class="col-12 col-sm-4 col-md-3">Recipient</dt>
                            <dd class="col-12 col-sm-8 col-md-9">
                                @Model.Recipient.Identity
                            </dd>
                        }
                        @if (Model.Revoked != null)
                        {
                            if (Model.Revoked == true)
                            {
                                <dt class="col-12 col-sm-4 col-md-3 text-danger">Revoked</dt>
                                <dd class="col-12 col-sm-8 col-md-9 text-danger">Yes</dd>
                            }
                            else
                            {
                                <dt class="col-12 col-sm-4 col-md-3">Revoked</dt>
                                <dd class="col-12 col-sm-8 col-md-9">No</dd>
                            }
                        }
                        @if (Model.RevocationReason != null)
                        {
                            <dt class="col-12 col-sm-4 col-md-3 text-danger">Revocation Reason</dt>
                            <dd class="col-12 col-sm-8 col-md-9 text-danger">@Model.RevocationReason</dd>
                        }
                        @if (Model.Role != null)
                        {
                            <dt class="col-12 col-sm-4 col-md-3">Role</dt>
                            <dd class="col-12 col-sm-8 col-md-9">@Model.Role</dd>
                        }
                        @if (Model.Term != null)
                        {
                            <dt class="col-12 col-sm-4 col-md-3">Term</dt>
                            <dd class="col-12 col-sm-8 col-md-9">@Model.Term</dd>
                        }
                    </dl>
                    @Html.DisplayFor(m => Model.Verification, "Verification", new { ClrEntityId = ViewData["ClrEntityId"], AssertionId = Model.Id })
                </div>
                <div class="card border-0">
                    <dl class="row">
                        @if (Model.Achievement.CreditsAvailable.HasValue)
                        {
                            <dt class="col-sm-4">Credits Available</dt>
                            <dd class="col-sm-8">@Model.Achievement.CreditsAvailable</dd>
                        }
                        @if (Model.Achievement.Description != null)
                        {
                            <dt class="col-sm-4">Description</dt>
                            <dd class="col-sm-8">@Html.Raw(Model.Achievement.Description)</dd>
                        }
                        @if (Model.Achievement.FieldOfStudy != null)
                        {
                            <dt class="col-sm-4">Field of Study</dt>
                            <dd class="col-sm-8">@Model.Achievement.FieldOfStudy</dd>
                        }
                        @if (Model.Achievement.HumanCode != null)
                        {
                            <dt class="col-sm-4">Human Code</dt>
                            <dd class="col-sm-8">@Model.Achievement.HumanCode</dd>
                        }
                        @if (Model.Achievement.Level != null)
                        {
                            <dt class="col-sm-4">Level</dt>
                            <dd class="col-sm-8">@Model.Achievement.Level</dd>
                        }
                        @if (Model.Achievement.Requirement != null)
                        {
                            <dt class="col-sm-4">Requirement</dt>
                            <dd class="col-sm-8 markdown">@Model.Achievement.Requirement.Narrative</dd>
                        }
                        @if (Model.Achievement.Specialization != null)
                        {
                            <dt class="col-sm-4">Specialization</dt>
                            <dd class="col-sm-8">@Model.Achievement.Specialization</dd>
                        }
                        @if (Model.Achievement.Tags != null)
                        {
                            <dt class="col-sm-4">Tags</dt>
                            <dd class="col-sm-8">@Html.DisplayFor(x => x.Achievement.Tags, "StringList")</dd>
                        }
                        @{
                            var achievementTypes = "<div>Achievement</div>" +
                                         "<div>Assessment Result</div>" +
                                         "<div>Award</div>" +
                                         "<div>Badge</div>" +
                                         "<div>Certificate</div>" +
                                         "<div>Certification</div>" +
                                         "<div>Course</div>" +
                                         "<div>Community Service</div>" +
                                         "<div>Competency</div>" +
                                         "<div>Co-Curricular</div>" +
                                         "<div>Degree</div>" +
                                         "<div>Diploma</div>" +
                                         "<div>Fieldwork</div>" +
                                         "<div>License</div>" +
                                         "<div>Membership</div>";
                        }

                        <dt class="col-sm-4">
                            Type
                            <img src="~/images/noun_Info_742307.svg" style="width: 1.5em" alt="Info"
                                 data-toggle="tooltip" data-html="true" title="@achievementTypes" />
                        </dt>
                        <dd class="col-sm-8">@Model.Achievement.AchievementType</dd>
                    </dl>
                </div>
            </div>

            @if (Model.Achievement.Issuer != null)
            {
                <div class="card mt-2">
                    @if (Model.Achievement.Issuer.Id == Model.ClrVM.RawClrDType.Learner.Id)
                    {
                        <button class="card-header bg-warning" id="issuerHeader-@Model.Id.SafeId()" data-toggle="collapse" data-target="#issuerBody-@Model.Id.SafeId()">
                            Issuer (Self-Issued)
                        </button>
                    }
                    else
                    {
                        <button class="card-header" id="issuerHeader-@Model.Id.SafeId()" data-toggle="collapse" data-target="#issuerBody-@Model.Id.SafeId()">
                            Issuer
                        </button>
                    }
                    <div id="issuerBody-@Model.Id.SafeId()" class="collapse">
                        <div class="card-body card-deck">
                            <div class="card border-0">
                                @Html.DisplayFor(m => Model.Achievement.Issuer, "Profile", new { ProfileType = "Issuer"})
                            </div>
                            <div class="card border-0">
                                @Html.DisplayFor(m => Model.Achievement.Issuer.PublicKey, "PublicKey")
                                @Html.DisplayFor(m => Model.Achievement.Issuer.Verification, "Verification")
                            </div>
                        </div>
                    </div>
                </div>
            }

            @* Results *@

            @if (Model.Results != null && Model.Results.Any())
            {
                <div class="card mt-2">
                    <button class="card-header" id="resultsHeader-@Model.Id.SafeId()" data-toggle="collapse" data-target="#resultsBody-@Model.Id.SafeId()">
                        Results
                    </button>
                    <div id="resultsBody-@Model.Id.SafeId()" class="collapse">
                        <div class="card-body card-deck">
                            <div class="card border-0">
                                <ul class="list-group">
                                    @foreach (var result in Model.Results)
                                    {
                                        var resultDescription = Model.Achievement.ResultDescriptions
                                            .Single(x => x.Id == result.ResultDescription);

                                        var achievedLevel = resultDescription.RubricCriterionLevels
                                            ?.SingleOrDefault(x => x.Id == result.AchievedLevel);

                                        var requiredLevel = resultDescription.RubricCriterionLevels
                                            ?.SingleOrDefault(x => x.Id == resultDescription.RequiredLevel);

                                        <li class="list-group-item">
                                            <dl class="row">
                                                <dt class="col-12 col-sm-4 col-md-3">Name</dt>
                                                <dd class="col-12 col-sm-8 col-md-9">@resultDescription.Name</dd>
                                                @if (resultDescription.RubricCriterionLevels != null && resultDescription.RubricCriterionLevels.Any())
                                                {
                                                    <dt class="col-12 col-sm-4 col-md-3">Rubric Levels</dt>
                                                    <dd class="col-12 col-sm-8 col-md-9">
                                                        <ul class="list-group">
                                                            @foreach (var level in resultDescription.RubricCriterionLevels)
                                                            {
                                                                <li class="list-group-item">
                                                                    <dl class="row">
                                                                        <dt class="col-12 col-sm-4 col-md-3">Name</dt>
                                                                        <dd class="col-12 col-sm-8 col-md-9">@level.Name</dd>
                                                                    </dl>
                                                                    @if (level.Description != null)
                                                                    {
                                                                        <dl class="row">
                                                                            <dt class="col-12 col-sm-4 col-md-3">Description</dt>
                                                                            <dd class="col-12 col-sm-8 col-md-9">@level.Description</dd>
                                                                        </dl>
                                                                    }
                                                                    @if (level.Level != null)
                                                                    {
                                                                        <dl class="row">
                                                                            <dt class="col-12 col-sm-4 col-md-3">Level</dt>
                                                                            <dd class="col-12 col-sm-8 col-md-9">@level.Level</dd>
                                                                        </dl>
                                                                    }
                                                                    @if (level.Points != null)
                                                                    {
                                                                        <dl class="row">
                                                                            <dt class="col-12 col-sm-4 col-md-3">Points</dt>
                                                                            <dd class="col-12 col-sm-8 col-md-9">@level.Points</dd>
                                                                        </dl>
                                                                    }
                                                                </li>
                                                            }
                                                        </ul>
                                                    </dd>
                                                }
                                                @if (requiredLevel != null)
                                                {
                                                    <dt class="col-12 col-sm-4 col-md-3">Required Level</dt>
                                                    <dd class="col-12 col-sm-8 col-md-9">@requiredLevel.Name</dd>

                                                }
                                                @if (achievedLevel != null)
                                                {
                                                    <dt class="col-12 col-sm-4 col-md-3">Achieved Level</dt>
                                                    <dd class="col-12 col-sm-8 col-md-9">@achievedLevel.Name</dd>

                                                }
                                                @if (resultDescription.AllowedValues != null && resultDescription.AllowedValues.Any())
                                                {
                                                    <dt class="col-12 col-sm-4 col-md-3">Allowed Values</dt>
                                                    <dd class="col-12 col-sm-8 col-md-9">@string.Join(", ", resultDescription.AllowedValues)</dd>
                                                }
                                                @if (resultDescription.ValueMin != null)
                                                {
                                                    <dt class="col-12 col-sm-4 col-md-3">Min Value</dt>
                                                    <dd class="col-12 col-sm-8 col-md-9">@resultDescription.ValueMin</dd>
                                                }
                                                @if (resultDescription.ValueMax != null)
                                                {
                                                    <dt class="col-12 col-sm-4 col-md-3">Max Value</dt>
                                                    <dd class="col-12 col-sm-8 col-md-9">@resultDescription.ValueMax</dd>
                                                }
                                                @if (resultDescription.RequiredValue != null)
                                                {
                                                    <dt class="col-12 col-sm-4 col-md-3">Required Value</dt>
                                                    <dd class="col-12 col-sm-8 col-md-9">@resultDescription.RequiredValue</dd>
                                                }
                                                @if (result.Value != null)
                                                {
                                                    <dt class="col-12 col-sm-4 col-md-3">Achieved Value</dt>
                                                    <dd class="col-12 col-sm-8 col-md-9">@result.Value</dd>
                                                }
                                            </dl>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @* Endorsements *@

            @{
                var endorsements = new List<EndorsementDType>();
                if (Model.Endorsements != null)
                {
                    endorsements.AddRange(Model.Endorsements);
                }
                if (Model.SignedEndorsements != null)
                {
                    endorsements.AddRange(Model.SignedEndorsements.Select(e => e.DeserializePayload<EndorsementDType>()));
                }
                if (Model.Achievement.Endorsements != null)
                {
                    endorsements.AddRange(Model.Achievement.Endorsements);
                }
                if (Model.Achievement.SignedEndorsements != null)
                {
                    endorsements.AddRange(Model.Achievement.SignedEndorsements.Select(e => e.DeserializePayload<EndorsementDType>()));
                }
                endorsements = endorsements.OrderBy(e => e.IssuedOn).ToList();
            }

            @if (endorsements.Any())
            {
                <div class="card mt-2">
                    <button class="card-header" id="endorsementHeader-@Model.Id.SafeId()" data-toggle="collapse" data-target="#endorsementBody-@Model.Id.SafeId()">
                        Endorsements
                    </button>
                    <div id="endorsementBody-@Model.Id.SafeId()" class="collapse">
                        <div class="card-body">
                            <ul class="list-group">
                                @foreach (var endorsement in endorsements)
                                {
                                    @Html.DisplayFor(m => endorsement, "Endorsement", new { ClrEntityId = ViewData["ClrEntityId"] })
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            }

            @* Evidence *@

            @if (Model.Evidence != null && Model.Evidence.Any())
            {
                <div class="card mt-2">
                    <button class="card-header" id="evidenceHeader-@Model.Id.SafeId()" data-toggle="collapse" data-target="#evidenceBody-@Model.Id.SafeId()">
                        Evidence
                    </button>
                    <div id="evidenceBody-@Model.Id.SafeId()" class="collapse">
                        <div class="card-body">
                            <ul class="list-group">
                                @foreach (var evidence in Model.Evidence)
                                {
                                    <li class="list-group-item">
                                        <dl class="row">
                                            <dt class="col-sm-2">Name</dt>
                                            <dd class="col-sm-10"><a href="@evidence.Id" target="_blank">@evidence.Name</a></dd>
                                            @if (evidence.Description != null)
                                            {
                                                <dt class="col-sm-2">Description</dt>
                                                <dd class="col-sm-10">@Html.Raw(evidence.Description)</dd>
                                            }
                                            @if (evidence.Narrative != null)
                                            {
                                                <dt class="col-sm-2">Narrative</dt>
                                                <dd class="col-sm-10 markdown">@Html.Raw(evidence.Narrative)</dd>
                                            }
                                            @if (evidence.Genre != null)
                                            {
                                                <dt class="col-sm-2">Genre</dt>
                                                <dd class="col-sm-10">@evidence.Genre</dd>
                                            }
                                            @if (evidence.Artifacts != null)
                                            {
                                                <dt class="col-sm-2">Artifacts</dt>
                                                <dd class="col-sm-10">
                                                    @foreach (var artifact in evidence.Artifacts)
                                                    {
                                                        if (artifact.Url != null)
                                                        {
                                                            if (artifact.Url.StartsWith("data:"))
                                                            {
                                                                <button class="btn btn-link" onclick="exportToView('@artifact.Url')">
                                                                    @(artifact.Name ?? "View Data")
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <a href="@artifact.Url" target="_blank">@(artifact.Name ?? "View URL")</a>
                                                            }
                                                        }
                                                    }
                                                </dd>
                                            }
                                        </dl>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            }

            @* Alignments *@

            @if (Model.Achievement.Alignments != null && Model.Achievement.Alignments.Any())
            {
                <div class="card mt-2">
                    <button class="card-header" id="alignmentsHeader-@Model.Id.SafeId()" data-toggle="collapse" data-target="#alignmentsBody-@Model.Id.SafeId()">
                        Alignments
                    </button>
                    <div id="alignmentsBody-@Model.Id.SafeId()" class="collapse">
                        <div class="card-body">
                            <ul class="list-group">
                                @foreach (var alignment in Model.Achievement.Alignments)
                                {
                                    <li class="list-group-item">
                                        <dl class="row">
                                            <dt class="col-sm-2">Framework</dt>
                                            <dd class="col-sm-10">@alignment.EducationalFramework</dd>
                                            <dt class="col-sm-2">Name</dt>
                                            <dd class="col-sm-10">
                                                <a href="@alignment.TargetUrl" target="_blank">@alignment.TargetName</a>
                                            </dd>
                                            <dt class="col-sm-2">Description</dt>
                                            <dd class="col-sm-10">@alignment.TargetDescription</dd>
                                        </dl>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            }

            @* Associations *@

            @if (Model.Achievement?.Associations != null && Model.Achievement.Associations.Any())
            {
                <div class="card mt-2">
                    <button class="card-header" id="associationsHeader-@Model.Id.SafeId()" data-toggle="collapse" data-target="#associationsBody-@Model.Id.SafeId()">
                        Associations
                    </button>
                    <div id="associationsBody-@Model.Id.SafeId()" class="collapse">
                        <div class="card-body">
                            <ul class="list-group">
                                @foreach (var association in Model.Achievement.Associations)
                                {
                                    <li class="list-group-item">
                                        This achievement
                                        <span style="font-style: italic">
                                            @association.AssociationType.ToEnumMemberValue()
                                        </span>
                                        <span style="font-weight: bold">
                                            @{
                                                var assertionVM = Model.ClrVM.AllAssertions.FirstOrDefault(a => a.AchievementVM.Achievement.Id == association.TargetId);
                                            }

                                            @if (assertionVM == null)
                                            {
                                                if (Uri.TryCreate(association.TargetId, UriKind.Absolute, out var uri))
                                                {
                                                    if (uri.Scheme == "http" || uri.Scheme == "https")
                                                    {
                                                        <a href="@uri" target="_blank">@uri</a>
                                                    }
                                                    else
                                                    {
                                                        <span>@association.TargetId</span>
                                                    }
                                                }
                                                else
                                                {
                                                    <span>@association.TargetId</span>
                                                }
                                            }
                                            else
                                            {
                                                @assertionVM.AchievementVM?.Achievement.Name
                                            }
                                        </span>


                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            }

            @* Additional Properties *@

            @if ((Model.AdditionalProperties != null && Model.AdditionalProperties.Any())
             || (Model.Achievement.AdditionalProperties != null && Model.Achievement.AdditionalProperties.Any()))
            {
                <div class="card mt-2">
                    <button class="card-header" id="additionalPropertiesHeader-@Model.Id.SafeId()" data-toggle="collapse" data-target="#additionalPropertiesBody-@Model.Id.SafeId()">
                        Additional Properties
                    </button>
                    <div id="additionalPropertiesBody-@Model.Id.SafeId()" class="collapse">
                        <div class="card-body card-deck">
                            <div class="card border-0">
                                <h6>Additional Assertion Properties</h6>
                                @if (Model.AdditionalProperties != null)
                                {
                                    <dl class="row">
                                        @foreach (var key in Model.AdditionalProperties.Keys)
                                        {
                                            <dt class="col-12 col-sm-4 col-md-3">@key</dt>
                                            <dd class="col-12 col-sm-8 col-md-9">@Model.AdditionalProperties[key]</dd>
                                        }
                                    </dl>
                                }
                            </div>
                            <div class="card border-0">
                                <h6>Additional Achievement Properties</h6>
                                @if (Model.Achievement.AdditionalProperties != null)
                                {
                                    <dl class="row">
                                        @foreach (var key in Model.Achievement.AdditionalProperties.Keys)
                                        {
                                            <dt class="col-12 col-sm-4 col-md-3">@key</dt>
                                            <dd class="col-12 col-sm-8 col-md-9">@Model.Achievement.AdditionalProperties[key]</dd>
                                        }
                                    </dl>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }

            @foreach (var childAssertion in Model.ChildAssertions.OrderBy(x => x.IssuedOn))
            {
                <div class="ml-5 mr-3">
                    @Html.DisplayFor(m => childAssertion, "Assertion")
                </div>
            }

        </div>
    </div>
</div>