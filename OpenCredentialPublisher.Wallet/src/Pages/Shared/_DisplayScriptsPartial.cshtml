<script type="text/javascript">

    // Render markdown
    $(".markdown").each(function (_, elem) {
        var text = "\n\n" + elem.innerHTML.trim(),
            converter = new showdown.Converter(),
            html = converter.makeHtml(text);
        elem.innerHTML = html;
    });

    // Enable formatted tooltips
    $(function () { 
        $('[data-toggle="tooltip"]').tooltip();
    });

    // Expand all the sections for printing
    window.onbeforeprint = function () {
        $("div.collapse").collapse("show");
    };

    //Get the scroll-to-top button:
    mybutton = document.getElementById("topBtn");

    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function () { scrollFunction() };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            mybutton.style.display = "block";
        } else {
            mybutton.style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        window.scroll({
            top: 0,
            left: 0,
            behavior: "smooth"
        });
    }

    function convertToBlob(dataUri) {
        console.log("Data URI: " + dataUri.substr(0, 15));

        // Extract the mime type
        const mimeString = dataUri.split(',')[0].split(':')[1].split(';')[0];
        console.log("Mime string: " + mimeString);

        // Convert base64 to raw binary data held in a string
        const binary = atob(dataUri.split(',')[1]);
        console.log("binary: " + binary.substr(0, 15));

        // Convert the binary data string to an ArrayBuffer
        const ab = new ArrayBuffer(binary.length);
        const ia = new Uint8Array(ab);
        for (var i = 0; i < binary.length; i++) {
            ia[i] = binary.charCodeAt(i);
        }

        return new Blob([ab], { type: mimeString });
    }

    // Download file encoded as a Data URI
    function exportToFile(dataUri, fileName) {

        // Extract the mime type
        const mimeString = dataUri.split(',')[0].split(':')[1].split(';')[0];
        console.log(`Mime string: ${mimeString}`);


        // Convert base64 to raw binary data held in a string
        const binary = atob(dataUri.split(',')[1]);
        console.log(`binary: ${binary.substr(0, 15)}`);

        // Convert the binary data string to an ArrayBuffer
        const ab = new ArrayBuffer(binary.length);
        const ia = new Uint8Array(ab);
        for (let i = 0; i < binary.length; i++) {
            ia[i] = binary.charCodeAt(i);
        }

        // Convert ArrayBuffer into a Blob
        const blob = convertToBlob(dataUri);

        // Create an object URL
        const url = window.URL.createObjectURL(blob);

        // Download the file
        const element = document.createElement('a');
        element.setAttribute('href', url);
        element.setAttribute('download', fileName);
        element.style.display = 'none';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    }

    // Display Data URI in a separate window
    function exportToView(dataUri) {
        const dataWindow = window.open("");
        dataWindow.document.write(
            `<iframe width='100%' height='100%' src='${dataUri}'></iframe>`);
    }
</script>

