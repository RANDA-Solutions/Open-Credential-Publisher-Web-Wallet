@page "{id}"
@using OpenCredentialPublisher.Wallet.Extensions;
@using OpenCredentialPublisher.Services.SignalR; 
@model OpenCredentialPublisher.Wallet.Pages.Wallets.SendModel
@{
    ViewData["Title"] = "Send Credential";
}

<div class="row mt-5">
    <div class="col">
        <section class="default-container p-5">
            <h3 class="mb-3">Your Wallet</h3>
            <hr />
            <dl class="row">
                <dt class="col-sm-2">Name</dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.Wallet.WalletName)
                </dd>
                <dt class="col-sm-2"><abbr title="@HelpTextConstants.RelationshipDID">Relationship DID</abbr></dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.Wallet.RelationshipDid)
                </dd>
                <dt class="col-sm-2">Created</dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.Wallet.CreatedOn)
                </dd>
            </dl>
            @*<div class="alert alert-primary">
                    A link is a URL you can share with people that lets them see your credential. The people that click on the link will
                    only be able to see the one credential you select. You can see how many times people have displayed your credential in the
                    table below.
                </div>*@
                <form id="send-form">
                    @Html.AntiForgeryToken()
                </form>

                <input type="hidden" id="walletId" value="@Model.Wallet.Id" />
                <hr />
                <h4 class="my-3">Send a credential</h4>
                <table class="table">
                    <thead>

                        <tr>
                            <th>Name</th>
                            <th><abbr title="@HelpTextConstants.TimesSent"></abbr>Count</th>
                            <th>Added</th>
                            <th><button type="button" id="refresh_button" class="btn btn-outline-primary btn-sm">Refresh</button></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var credential in Model.Credentials)
                        {
                            <tr>
                                <td>
                                    @credential.Title
                                </td>
                                <td>
                                    @credential.TimesSent
                                </td>
                                <td>
                                    @credential.DateAdded
                                </td>
                                <td style="white-space: nowrap">
                                    <button type="button" class="btn btn-outline-primary" name="btn-send-credential" data-id="@credential.Id">Send <span name="wallet-loader" class="spinner-border spinner-border-sm" style="display:none;" role="status" aria-hidden="true"></span></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <a asp-page="/Wallets/Index">Back to Wallets</a>

</section>
    </div>
</div>

<div class="modal fade" id="status-modal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Sending Credential</h5>
                <button type="button" class="btn-close" style="display:none;" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul id="status-list" class="list-group list-group-plain text-center">
                    <li class="static-status list-group-item text-bold">Generating Request</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="error-modal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="">Error Sending Credential</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <ul id="error-list" class="list-group list-group-plain text-center">
                    There was an error sending your credential.  Please try again later.  If this issue continues, please contact support.
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-primary btn-lg" data-dismiss="modal">CLOSE</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="revoked-modal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="">Credential Revoked</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <ul id="revoked-list" class="list-group list-group-plain text-center">
                    That credential has been revoked by the issuer and may not be sent to your wallet at this time. 
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" id="revoke_close_button" class="btn btn-outline-primary btn-lg" data-dismiss="modal">CLOSE</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/signalr/signalr.js"></script>
    <script>
        var signalRConnection = null;
        var origin = null;
        var enabled = false;
        var statuses = {};
        function connectSignalR() {
            if (enabled)
                return;

            signalRConnection = new signalR.HubConnectionBuilder()
                .withUrl("@CredentialStatusHub.Endpoint")
                .withAutomaticReconnect()
                .configureLogging(signalR.LogLevel.Information)
                .build();

            signalRConnection.on('@CredentialStatusHub.CredentialStatus', (id, packageId, status, done, error, revoked) => {
                console.log(`SignalR received @CredentialStatusHub.CredentialStatus message (requestId: ${packageId})`);
                console.log(status);

                if (!statuses[status]) {
                    statuses[status] = true;
                    addStatus(status);
                }
                if (done) {
                    $("#status-modal").modal("hide");
                }

                if (error) {
                    $("#error-modal").modal();
                }

                if (revoked) {
                    $("#revoked-modal").modal();
                }
            });



            signalRConnection.onclose(startSignalR);

            // Start the connection.
            startSignalR();
        }

        function spinner() {
            return '<div id="spinner" class="spinner-grow spinner-grow-sm" role="status"></div>';
        }

        function addStatus(status) {
            $("#status-list li.text-bold").addClass("disabled");
            $("#status-list li.text-bold").removeClass("text-bold");
            $("#spinner").remove();
            $("#status-list").append(`<li class="list-group-item text-bold">${status.replace(/([A-Z])/g, ' $1').trim()} ${spinner()}</li>`);
        }


        async function startSignalR() {
            try {
                await signalRConnection.start();
                enabled = true;
                console.log("SignalR Connected.");
                //signalRConnection.invoke("JoinGroup", requestId)
                //    .catch(err => {
                //        console.log(err);
                //    });
            } catch (err) {
                console.log(err);
                setTimeout(startSignalR, 5000);
            }
        };
        $("button[name='btn-send-credential']").click(function () {
            origin = this;
            var packageId = $(origin).data("id");
            var walletId = $("#walletId").val();
            
            $.ajax(`/Wallets/Send/${walletId}`, {
                type: 'POST',
                headers: {
                    "RequestVerificationToken": $("#send-form input").val()
                },
                data: {
                    packageId: packageId
                }
            }).then(function (data) {
                statuses = {};
                connectSignalR();
                $("#status-list").html("");
                addStatus("Generating Request");
                $("#status-modal").modal();

            });
        });

        

        $("#refresh_button, #revoke_close_button").click(function () {
            window.location.reload();
        })
    </script>
}