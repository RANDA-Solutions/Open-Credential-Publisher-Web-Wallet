/* 
 * verity-rest-api
 *
 * # The REST API for Verity  ## Introduction This is the REST API for Verity - Evernym's platform for Verifiable Credential exchange. With Verity you can enable SSI (Self-sovereign Identity) into your project which is based on Decentralized Identifiers (DIDs) and Verifiable Credentials (VCs).  The Verifiable Credentials data model defines Issuer, Verifier and the Holder. Issuer is an organization that creates and issues Verifiable Credentials to individuals, also known as Holders. Holders typically have a digital wallet app to store credentials securely and control how those credentials are being shared with Verifiers. Verifier is an organization that verifies information from the credentials that Holders have stored on their digital wallet app.  With Verity REST API, you can enable issuing or verifying or both functions into your project and interact with individuals using Connect.Me or some other compatible digital wallet app.  Verity REST API exposes endpoints that enable you to initiate basic SSI protocols such are establishing a DID connection between your organization and individuals, issuing a Verifiable Credential to individual and requesting and validating Proofs from individuals. SSI interactions are asynchronous in its nature, therefore we have decided to that these endpoints follow the same async pattern. Besides SSI protocols, Verity REST API exposes endpoints for writing Schemas and Credential Definitions to the ledger.  ## Authentication In order to use the Verity REST API, you'll need to use API key. API key is currently provisioned by Evernym. Contact Evernym to obtain your API key. In case you are already a Verity SDK user, you may use a method in SDK to create an API key for REST API.  ## How to use REST API After obtaining an endpoint and API key for your from Evernym, there are few API calls that you'll need to make before you can invoke SSI protocols. Firstly you'll need to call the UpdateEndpoint to register a webhook where you'll be receiving callbacks from your Verity Server. If you plan to issue credentials to individuals, you'll also need to set up your Issuer Identity. This you can do by calling IssuerSetup endpoint. The callback that you'll receive contains a DID and Verkey. This DID and Verkey represents your Issuer Identity and must be written to the ledger, using the Sovrin Self-Serve Website (https://selfserve.sovrin.org) for the Sovrin StagingNet. The DID and Verkey must be transferred accurately to the self-serve site. Once that is done, you may want to set your Organizational name and logo that will be shown on the Connect.Me or other compatible wallet apps by calling the UpdateConfigs endpoint and after that you may start to create Schema, Credential Definition and interact with individuals using SSI protocols. Before you can issue credentials to individuals or request proofs from them, you need to establish a DID connection by calling a Relationship endpoint. ## Useful links [Tutorials](https://github.com/evernym/verity-sdk/tree/master/docs/howto)  [Code samples](https://github.com/evernym/verity-sdk/tree/master/samples/rest-api)  [Protocol and message identification](https://github.com/evernym/verity-sdk/blob/master/docs/howto/Protocol-and-Message-Identification-in-Verity.md)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenCredentialPublisher.VerityRestApi.Client;
using OpenCredentialPublisher.VerityRestApi.Model;

namespace OpenCredentialPublisher.VerityRestApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IIssuerSetupApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiates IssuerSetup protocol.  Creates Issuer DID and public/private keypair that are going to be used to issue credentials. This DID and public key (Verkey) need to be written to the Sovrin StagingNet (https://selfserve.sovrin.org) before you can create Schemas and Credential Definitions.                                                         
        /// </remarks>
        /// <exception cref="OpenCredentialPublisher.VerityRestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainDID"></param>
        /// <param name="threadId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>PostResponse</returns>
        PostResponse ApiDomainDIDIssuerSetup06ThreadIdPost (string domainDID, Guid? threadId, Body3 body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiates IssuerSetup protocol.  Creates Issuer DID and public/private keypair that are going to be used to issue credentials. This DID and public key (Verkey) need to be written to the Sovrin StagingNet (https://selfserve.sovrin.org) before you can create Schemas and Credential Definitions.                                                         
        /// </remarks>
        /// <exception cref="OpenCredentialPublisher.VerityRestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainDID"></param>
        /// <param name="threadId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PostResponse</returns>
        ApiResponse<PostResponse> ApiDomainDIDIssuerSetup06ThreadIdPostWithHttpInfo (string domainDID, Guid? threadId, Body3 body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiates IssuerSetup protocol.  Creates Issuer DID and public/private keypair that are going to be used to issue credentials. This DID and public key (Verkey) need to be written to the Sovrin StagingNet (https://selfserve.sovrin.org) before you can create Schemas and Credential Definitions.                                                         
        /// </remarks>
        /// <exception cref="OpenCredentialPublisher.VerityRestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainDID"></param>
        /// <param name="threadId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PostResponse</returns>
        System.Threading.Tasks.Task<PostResponse> ApiDomainDIDIssuerSetup06ThreadIdPostAsync (string domainDID, Guid? threadId, Body3 body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiates IssuerSetup protocol.  Creates Issuer DID and public/private keypair that are going to be used to issue credentials. This DID and public key (Verkey) need to be written to the Sovrin StagingNet (https://selfserve.sovrin.org) before you can create Schemas and Credential Definitions.                                                         
        /// </remarks>
        /// <exception cref="OpenCredentialPublisher.VerityRestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainDID"></param>
        /// <param name="threadId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostResponse>> ApiDomainDIDIssuerSetup06ThreadIdPostAsyncWithHttpInfo (string domainDID, Guid? threadId, Body3 body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class IssuerSetupApi : IIssuerSetupApi
    {
        private OpenCredentialPublisher.VerityRestApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuerSetupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IssuerSetupApi(String basePath)
        {
            this.Configuration = new OpenCredentialPublisher.VerityRestApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenCredentialPublisher.VerityRestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuerSetupApi"/> class
        /// </summary>
        /// <returns></returns>
        public IssuerSetupApi()
        {
            this.Configuration = OpenCredentialPublisher.VerityRestApi.Client.Configuration.Default;

            ExceptionFactory = OpenCredentialPublisher.VerityRestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuerSetupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IssuerSetupApi(OpenCredentialPublisher.VerityRestApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenCredentialPublisher.VerityRestApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenCredentialPublisher.VerityRestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenCredentialPublisher.VerityRestApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenCredentialPublisher.VerityRestApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Initiates IssuerSetup protocol.  Creates Issuer DID and public/private keypair that are going to be used to issue credentials. This DID and public key (Verkey) need to be written to the Sovrin StagingNet (https://selfserve.sovrin.org) before you can create Schemas and Credential Definitions.                                                         
        /// </summary>
        /// <exception cref="OpenCredentialPublisher.VerityRestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainDID"></param>
        /// <param name="threadId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>PostResponse</returns>
        public PostResponse ApiDomainDIDIssuerSetup06ThreadIdPost (string domainDID, Guid? threadId, Body3 body = null)
        {
             ApiResponse<PostResponse> localVarResponse = ApiDomainDIDIssuerSetup06ThreadIdPostWithHttpInfo(domainDID, threadId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Initiates IssuerSetup protocol.  Creates Issuer DID and public/private keypair that are going to be used to issue credentials. This DID and public key (Verkey) need to be written to the Sovrin StagingNet (https://selfserve.sovrin.org) before you can create Schemas and Credential Definitions.                                                         
        /// </summary>
        /// <exception cref="OpenCredentialPublisher.VerityRestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainDID"></param>
        /// <param name="threadId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PostResponse</returns>
        public ApiResponse< PostResponse > ApiDomainDIDIssuerSetup06ThreadIdPostWithHttpInfo (string domainDID, Guid? threadId, Body3 body = null)
        {
            // verify the required parameter 'domainDID' is set
            if (domainDID == null)
                throw new ApiException(400, "Missing required parameter 'domainDID' when calling IssuerSetupApi->ApiDomainDIDIssuerSetup06ThreadIdPost");
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling IssuerSetupApi->ApiDomainDIDIssuerSetup06ThreadIdPost");

            var localVarPath = "/api/{domainDID}/issuer-setup/0.6/{threadId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                Constants.JsonContentType
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                Constants.JsonContentType
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domainDID != null) localVarPathParams.Add(Constants.DomainDidPathParam, this.Configuration.ApiClient.ParameterToString(domainDID)); // path parameter
            if (threadId != null) localVarPathParams.Add(Constants.ThreadPathParam, this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix(Constants.ApiKeyHeader)))
            {
                localVarHeaderParams[Constants.ApiKeyHeader] = this.Configuration.GetApiKeyWithPrefix(Constants.ApiKeyHeader);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiDomainDIDIssuerSetup06ThreadIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostResponse)));
        }

        /// <summary>
        ///  Initiates IssuerSetup protocol.  Creates Issuer DID and public/private keypair that are going to be used to issue credentials. This DID and public key (Verkey) need to be written to the Sovrin StagingNet (https://selfserve.sovrin.org) before you can create Schemas and Credential Definitions.                                                         
        /// </summary>
        /// <exception cref="OpenCredentialPublisher.VerityRestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainDID"></param>
        /// <param name="threadId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PostResponse</returns>
        public async System.Threading.Tasks.Task<PostResponse> ApiDomainDIDIssuerSetup06ThreadIdPostAsync (string domainDID, Guid? threadId, Body3 body = null)
        {
             ApiResponse<PostResponse> localVarResponse = await ApiDomainDIDIssuerSetup06ThreadIdPostAsyncWithHttpInfo(domainDID, threadId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Initiates IssuerSetup protocol.  Creates Issuer DID and public/private keypair that are going to be used to issue credentials. This DID and public key (Verkey) need to be written to the Sovrin StagingNet (https://selfserve.sovrin.org) before you can create Schemas and Credential Definitions.                                                         
        /// </summary>
        /// <exception cref="OpenCredentialPublisher.VerityRestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainDID"></param>
        /// <param name="threadId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PostResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostResponse>> ApiDomainDIDIssuerSetup06ThreadIdPostAsyncWithHttpInfo (string domainDID, Guid? threadId, Body3 body = null)
        {
            // verify the required parameter 'domainDID' is set
            if (domainDID == null)
                throw new ApiException(400, "Missing required parameter 'domainDID' when calling IssuerSetupApi->ApiDomainDIDIssuerSetup06ThreadIdPost");
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling IssuerSetupApi->ApiDomainDIDIssuerSetup06ThreadIdPost");

            var localVarPath = "/api/{domainDID}/issuer-setup/0.6/{threadId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                Constants.JsonContentType
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                Constants.JsonContentType
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domainDID != null) localVarPathParams.Add(Constants.DomainDidPathParam, this.Configuration.ApiClient.ParameterToString(domainDID)); // path parameter
            if (threadId != null) localVarPathParams.Add(Constants.ThreadPathParam, this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix(Constants.ApiKeyHeader)))
            {
                localVarHeaderParams[Constants.ApiKeyHeader] = this.Configuration.GetApiKeyWithPrefix(Constants.ApiKeyHeader);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiDomainDIDIssuerSetup06ThreadIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostResponse)));
        }

    }
}
