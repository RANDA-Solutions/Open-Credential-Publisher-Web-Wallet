/*
 * Open Badges OpenAPI (JSON) Definition
 *
 * Open Badges Connect is a secure REST interface for exchanging Open Badges.
 *
 * The version of the OpenAPI document: 2.1
 * Contact: lmattson@imsglobal.org
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.ComponentModel;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace OpenCredentialPublisher.ObcLibrary.Original2dot1Models
{
    /// <summary>
    /// The payload for the POST /assertions endpoint.
    /// </summary>
    public partial class AssertionPayloadDType : IEquatable<AssertionPayloadDType>
    { 
        /// <summary>
        /// Gets or Sets Assertion
        /// </summary>
        [JsonPropertyName("assertion")]
        [Description("Assertion")]
        public AssertionDType Assertion { get; set; }
        
        /// <summary>
        /// Model Primitive Datatype = String. A signed assertion in JWS Compact Serialization format.
        /// </summary>
        /// <value>Model Primitive Datatype = String. A signed assertion in JWS Compact Serialization format.</value>
        [JsonPropertyName("signedAssertion")]
        [Description("Model Primitive Datatype = String. A signed assertion in JWS Compact Serialization format.")]
        public string SignedAssertion { get; set; }
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssertionPayloadDType {\n");
            sb.Append("  Assertion: ").Append(Assertion).Append("\n");
            sb.Append("  SignedAssertion: ").Append(SignedAssertion).Append("\n");

            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AssertionPayloadDType)obj);
        }

        /// <summary>
        /// Returns true if AssertionPayloadDType instances are equal
        /// </summary>
        /// <param name="other">Instance of AssertionPayloadDType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssertionPayloadDType other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Assertion == other.Assertion ||
                    Assertion != null &&
                    Assertion.Equals(other.Assertion)
                ) && 
                (
                    SignedAssertion == other.SignedAssertion ||
                    SignedAssertion != null &&
                    SignedAssertion.Equals(other.SignedAssertion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Assertion != null)
                    hashCode = hashCode * 59 + Assertion.GetHashCode();
                                    if (SignedAssertion != null)
                    hashCode = hashCode * 59 + SignedAssertion.GetHashCode();
                                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AssertionPayloadDType left, AssertionPayloadDType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AssertionPayloadDType left, AssertionPayloadDType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
