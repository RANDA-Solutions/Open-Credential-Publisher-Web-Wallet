/*
 * Open Badges OpenAPI (JSON) Definition
 *
 * Open Badges Connect is a secure REST interface for exchanging Open Badges.
 *
 * The version of the OpenAPI document: 2.1
 * Contact: lmattson@imsglobal.org
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;
using System.Text.Json.Serialization;
using OpenCredentialPublisher.ObcLibrary.Converters;

namespace OpenCredentialPublisher.ObcLibrary.Models
{ 
    /// <summary>
    /// Response status.
    /// </summary>
    public partial class StatusDType : IEquatable<StatusDType>
    { 
        /// <summary>
        /// Model Primitive Datatype = String. A nullable string and the human-readable message describing the problem.
        /// </summary>
        /// <value>Model Primitive Datatype = String. A nullable string and the human-readable message describing the problem.</value>
        [JsonPropertyName("error")]
        [Description("Model Primitive Datatype = String. A nullable string and the human-readable message describing the problem.")]
        public string Error { get; set; }
        
        /// <summary>
        /// Model Primitive Datatype = Integer. The HTTP status code of the response.
        /// </summary>
        /// <value>Model Primitive Datatype = Integer. The HTTP status code of the response.</value>
        [Required]
        [JsonPropertyName("statusCode")]
        [Description("Model Primitive Datatype = Integer. The HTTP status code of the response.")]
        public int StatusCode { get; set; }
        
        /// <summary>
        /// A string matching one of the enumerated and allowed values for the given endpoint.
        /// </summary>
        /// <value>A string matching one of the enumerated and allowed values for the given endpoint.</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusTextEnum>))]
        [JsonConverter(typeof(StringEnumConverter<StatusTextEnum>))]
        public enum StatusTextEnum
        {
            
            /// <summary>
            /// Enum OKEnum for OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OKEnum = 1,
            
            /// <summary>
            /// Enum REQUESTVALIDATIONERROREnum for REQUEST_VALIDATION_ERROR
            /// </summary>
            [EnumMember(Value = "REQUEST_VALIDATION_ERROR")]
            REQUESTVALIDATIONERROREnum = 2,
            
            /// <summary>
            /// Enum RECIPIENTPROFILEMISMATCHEnum for RECIPIENT_PROFILE_MISMATCH
            /// </summary>
            [EnumMember(Value = "RECIPIENT_PROFILE_MISMATCH")]
            RECIPIENTPROFILEMISMATCHEnum = 3,
            
            /// <summary>
            /// Enum INVALIDBADGEEnum for INVALID_BADGE
            /// </summary>
            [EnumMember(Value = "INVALID_BADGE")]
            INVALIDBADGEEnum = 4,
            
            /// <summary>
            /// Enum BADREQUESTEnum for BAD_REQUEST
            /// </summary>
            [EnumMember(Value = "BAD_REQUEST")]
            BADREQUESTEnum = 5,
            
            /// <summary>
            /// Enum UNAUTHENTICATEDEnum for UNAUTHENTICATED
            /// </summary>
            [EnumMember(Value = "UNAUTHENTICATED")]
            UNAUTHENTICATEDEnum = 6,
            
            /// <summary>
            /// Enum PERMISSIONDENIEDEnum for PERMISSION_DENIED
            /// </summary>
            [EnumMember(Value = "PERMISSION_DENIED")]
            PERMISSIONDENIEDEnum = 7,
            
            /// <summary>
            /// Enum NOTFOUNDEnum for NOT_FOUND
            /// </summary>
            [EnumMember(Value = "NOT_FOUND")]
            NOTFOUNDEnum = 8,
            
            /// <summary>
            /// Enum METHODNOTALLOWEDEnum for METHOD_NOT_ALLOWED
            /// </summary>
            [EnumMember(Value = "METHOD_NOT_ALLOWED")]
            METHODNOTALLOWEDEnum = 9
        }

        /// <summary>
        /// A string matching one of the enumerated and allowed values for the given endpoint.
        /// </summary>
        /// <value>A string matching one of the enumerated and allowed values for the given endpoint.</value>
        [JsonPropertyName("statusText")]
        [Description("A string matching one of the enumerated and allowed values for the given endpoint.")]
        public StatusTextEnum StatusText { get; set; }
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatusDType {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  StatusText: ").Append(StatusText).Append("\n");

            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StatusDType)obj);
        }

        /// <summary>
        /// Returns true if StatusDType instances are equal
        /// </summary>
        /// <param name="other">Instance of StatusDType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatusDType other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Error == other.Error ||
                    Error != null &&
                    Error.Equals(other.Error)
                ) && 
                (
                    StatusCode == other.StatusCode ||
                    
                    StatusCode.Equals(other.StatusCode)
                ) && 
                (
                    StatusText == other.StatusText ||
                    
                    StatusText.Equals(other.StatusText)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                                    
                    hashCode = hashCode * 59 + StatusCode.GetHashCode();
                                    
                    hashCode = hashCode * 59 + StatusText.GetHashCode();
                                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StatusDType left, StatusDType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StatusDType left, StatusDType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
